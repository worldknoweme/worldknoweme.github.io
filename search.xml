<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Springboot里面如何定义拦截器]]></title>
      <url>/2018/01/25/Springboot%E9%87%8C%E9%9D%A2%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一下子转入springboot的怀抱之后，对于之前通过xml进行的一些配置。转成完全基于注解式，可能都有些不习惯吧。此次面对一个这样的需求，计划将公用的基础信息进行查询，可以直接给页面使用。</p>
</blockquote>
<h1 id="需求介绍"><a href="#需求介绍" class="headerlink" title="需求介绍"></a>需求介绍</h1><p>页面使用的Thymeleaf框架，使用框架的模板，将整体页面布局进行拆分。其中，页面头作为公用的模板引入到了每一个页面。页面里面使用Thymeleaf标签进行后台动态数据的取值。这样做就会产生一个问题：即动态数据变量如何每次都获取到值？</p>
<p>总结到如下两种解决方案：</p>
<ol>
<li>使用缓存技术。之前写过一篇springboot和Ehcache集成的文章。<a href="https://www.jianshu.com/p/05f3ede0b389" target="_blank" rel="noopener">springboot整合EHCache</a>，可以参考该文章。但是，这样的话需要每一次都进行缓存的取值，比较繁琐。上次说过，使用springboot的缓存技术去查询，定义拦截器，然后每次都去查询数据库（会自动识别，第一次才会查询数据库，之后不再查询数据库）。但是，无论这种方式如何去优化，总之都要进行缓存的取值。</li>
<li>使用拦截器拦截，之后存入servlet的attribute。这样的话，公用的Thymeleaf模板直接去servlet下面取值就好了。</li>
</ol>
<blockquote>
<p>相对于第一种方案，第二种比较简洁，不必每次都去查询。可以说是，一次拦截，终身受益。针对于第二种方案，下面重点介绍一下，说一下整体的实现过程。</p>
</blockquote>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>实现思路很简单，定义拦截器，拦截我们制定的请求。之后将数据存入request。页面直接从request里面取值。</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ul>
<li>定义拦截器</li>
</ul>
<p>这个不必多说，继承HandlerInterceptorAdapter，之后重写preHandle即可。代码如下以供参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 网站信息拦截器，将网站的基础信息进行拦截</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class LimitIntercepterForWebsite extends HandlerInterceptorAdapter&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(LimitIntercepterForWebsite.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    private EduWebsiteProfileService eduWebsiteProfileService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EduWebsiteNavigateService eduWebsiteNavigateService;</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        super.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        super.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        //获取配置信息</span><br><span class="line">        Map&lt;String,Object&gt; websitemap = eduWebsiteProfileService.getWebsiteProfileByType(&quot;web&quot;);</span><br><span class="line">        request.setAttribute(&quot;websitemap&quot;,websitemap);</span><br><span class="line">        Map&lt;String,Object&gt; logomap = eduWebsiteProfileService.getWebsiteProfileByType(&quot;logo&quot;);</span><br><span class="line">        request.setAttribute(&quot;logomap&quot;,logomap);</span><br><span class="line">        Map&lt;String, Object&gt; navigateMap =  eduWebsiteNavigateService.getWebNavigate();</span><br><span class="line">        request.setAttribute(&quot;navigateList&quot;,navigateMap.get(&quot;INDEX&quot;));</span><br><span class="line">        return super.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：上面定义的拦截器，需要注解为component组件</strong></p>
<ul>
<li>注解配置该拦截器</li>
</ul>
<p>这里，需要在配置类里面进行拦截器的配置，配置类定义为Configuration，同时继承WebMvcConfigurerAdapter类。重写addInterceptors方法，在该方法里面实现对指定请求的拦截。代码如下以供参考：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> //添加拦截器</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        //多个拦截器组成一个拦截器链</span><br><span class="line">        // addPathPatterns用于添加拦截规则</span><br><span class="line">        // excludePathPatterns用户排除拦截</span><br><span class="line">//        super.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(limitIntercepterForWebsite()).addPathPatterns(&quot;/**&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>这里对所有的请求实现了拦截</strong></p>
<ul>
<li>在Thmeleaf框架对于的html页面，进行request变量的取值。</li>
</ul>
<p>使用内置变量httpServletRequest进行取值即可。代码如下以供参考：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li th:each=&quot;nav:$&#123;#httpServletRequest.getAttribute(&apos;navigateList&apos;)&#125;&quot;&gt;</span><br><span class="line">                        &lt;a th:href=&quot;$&#123;nav.url&#125;&quot; th:title=&quot;$&#123;nav.name&#125;&quot;&gt;</span><br><span class="line">                            &lt;span th:text=&quot;$&#123;nav.name&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>综上，完成了一个在springboot下面拦截器的实现。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拦截器 </tag>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery+ajaxform+springboot控件实现数据更新操作]]></title>
      <url>/2018/01/19/jquery-ajaxform-springboot%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="应用背景"><a href="#应用背景" class="headerlink" title="应用背景"></a>应用背景</h1><p>使用springboot架构在如下图所示的界面布局中，实现数据的保存或者更新，务必需要提交到后台，如何进行成功或失败的提示呢？如果使用传统的springmvc的模式，势必要传一个页面给前端，这个页面仅仅是提示操作是否成功了！提示之后还得更新一下数据，就好比我们浏览某些网站的时候给出的一些提示<strong>操作成功，5秒后返回</strong>。<br>比较傻，客户体验也比较差劲。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-3ed542e6bb3886fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="改造历程"><a href="#改造历程" class="headerlink" title="改造历程"></a>改造历程</h1><p>使用ajax能否解决上述的问题呢？<br>答案是肯定的，点击保存之后，一个ajax请求到后台，使用ResponseBody标签，限制返回的仅仅是数据。然后根据返回的数据给出相应的提示信息就可以了。<br>传统的ajax请求数据，需要将form里面的数据重组，全部放到我们的请求体里面。如下代码所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: &apos;POST&apos;,</span><br><span class="line">  url: url,</span><br><span class="line">  data: data,</span><br><span class="line">  success: success,</span><br><span class="line">  dataType: dataType</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果，我提交的form数据比较多的话，那么data就相对比较庞大了。代码比较臃肿。同时，form表单也丧失了其存在的意义了。<br>有没有一种比较优雅的方式实现form表单的ajax提交呢？当然。<br>jquery的ajaxform插件是一个比较不错的选择。  </p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ul>
<li>第一步。当然是引入我们强大的插件了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;static/assets/js/jquery.form.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>该js下载，我提供一下github的地址吧：<a href="https://github.com/jquery-form/form。" target="_blank" rel="noopener">https://github.com/jquery-form/form。</a></p>
<ul>
<li>第二步。在我们想要发送请求的地方进行ajax+form请求的发送。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function insert() &#123;</span><br><span class="line">               var options = &#123;</span><br><span class="line">                   // target:        &apos;#output1&apos;,   // 用服务器返回的数据 更新 id为output1的内容.</span><br><span class="line">                   // beforeSubmit:  showRequest,  // 提交前</span><br><span class="line">                   success:       showResponse,  // 提交后</span><br><span class="line">                   //另外的一些属性:</span><br><span class="line">                   //url:       url         // 默认是form的action，如果写的话，会覆盖from的action.</span><br><span class="line">                   //type:      type        // 默认是form的method，如果写的话，会覆盖from的method.(&apos;get&apos; or &apos;post&apos;).</span><br><span class="line">                   //dataType:  null        // &apos;xml&apos;, &apos;script&apos;, or &apos;json&apos; (接受服务端返回的类型.)</span><br><span class="line">                   //clearForm: true        // 成功提交后，清除所有的表单元素的值.</span><br><span class="line">                   resetForm: false        // 成功提交后，重置所有的表单元素的值.</span><br><span class="line">                   //由于某种原因,提交陷入无限等待之中,timeout参数就是用来限制请求的时间,</span><br><span class="line">                   //当请求大于3秒后，跳出请求.</span><br><span class="line">                   //timeout:   3000</span><br><span class="line">               &#125;;</span><br><span class="line"></span><br><span class="line">               //&apos;ajaxForm&apos; 方式的表单 .</span><br><span class="line">               $(&apos;#baseForm&apos;).ajaxSubmit(options);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>处理一下提交后返回的方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//  提交后</span><br><span class="line">          function showResponse(responseText, statusText)  &#123;</span><br><span class="line">              alert(&apos;状态: &apos; + statusText + &apos;\n 返回的内容是: \n&apos; + responseText);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>后台实现代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/basicSave&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String BasicSave(PointInfo pi)&#123;</span><br><span class="line">       if(!pi.getSaddress().equals(&quot;&quot;))&#123;</span><br><span class="line">           pi.setType(&quot;1&quot;);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           pi.setType(&quot;0&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       int newId = pointInfoService.saveorupdate(pi);</span><br><span class="line">       return newId+&quot;&quot;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>逻辑自行定义</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>提交的时候一定要使用ajaxSubmit方法</li>
<li>提交的action，请求方式（post还是get）、dataType（json、xml）等默认都采用的form里面的数据，如果在参数里面进行了修改，那么就会覆盖掉。</li>
</ul>
<h1 id="后续研究"><a href="#后续研究" class="headerlink" title="后续研究"></a>后续研究</h1><h2 id="关于提示框"><a href="#关于提示框" class="headerlink" title="关于提示框"></a>关于提示框</h2><p>使用alert？我费尽心思用上了bootstrap，你这里搞一个alert出来，简直就是往一盘美味里面吐唾沫。有没有美观一点的提示框？当然，答案是肯定的！<br><strong>使用notifications插件来完成提示框的美化</strong><br>先上个效果图：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-c272e6161508a982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ul>
<li>导入notifications所需js和css</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script src=&quot;static/assets/plugins/notifyjs/dist/notify.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;static/assets/plugins/notifications/notify-metro.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;static/assets/plugins/notifications/notifications.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link href=&quot;static/assets/plugins/notifications/notification.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用接口即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.Notification.notify(&apos;success&apos;,&apos;top center&apos;, &apos;温馨提示&apos;, &apos;保存成功！&apos;);</span><br></pre></td></tr></table></figure>
<p>完毕！实现了jquery+ajaxform的表单提交过程。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
            <tag> jquery </tag>
            
            <tag> ajaxform </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bootstrap的toggles开关的使用]]></title>
      <url>/2018/01/17/bootstrap%E7%9A%84toggles%E5%BC%80%E5%85%B3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>第一次使用，总结一下使用方法。</p>
</blockquote>
<ol>
<li><p>引入css</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;static/assets/plugins/toggles/toggles.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入js文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;static/assets/plugins/toggles/toggles.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">         &lt;label class=&quot;col-md-2 control-label&quot;&gt;是否联网&lt;/label&gt;</span><br><span class="line">         &lt;div class=&quot;col-md-10 control-label&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;toggle toggle-success&quot;&gt;&lt;/div&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>script里面进行初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $(function () &#123;</span><br><span class="line">   // Form Toggles</span><br><span class="line">   $(&apos;.toggle&apos;).toggles(&#123;on: true&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> toggles </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot整合EHCache]]></title>
      <url>/2018/01/17/springboot%E6%95%B4%E5%90%88EHCache/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用户登录之后，几乎之后展示任何页面都需要显示一下用户信息。可以在用户登录成功之后将用户信息进行缓存，之后直接取缓存数据即可。  </p>
</blockquote>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>对于SpringBoot而言，内置了属于自己的缓存框架，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<p>如何使用该框架进行缓存，网上一大堆资料。但是绝大多数都是描述如何在service层进行缓存，之后从数据库取数据的时候直接拿缓存数据，不再进行二次查询了。<strong>但是我目前的需求仅仅是缓存登录用户，下次直接用代码取出来。而不是再调一次service方法！貌似搜到任何资料！可能大家都没遇到过吧。</strong>  </p>
<h1 id="探索方案"><a href="#探索方案" class="headerlink" title="探索方案"></a>探索方案</h1><p>在之前的项目中，曾经用到过EHcache，当然也有对应的EHCacheUtils方法。下面就说一下springboot和ehcache的整合。  </p>
<p>真实操作之后，发现整合ehcache非常简单，三步即可：</p>
<ol>
<li><p>导入maven包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;2.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类开启缓存机制<br><img src="http://upload-images.jianshu.io/upload_images/9493059-d304793edb7400c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li>添加ehcache配置文件，直接在resources下面新建ehcache.xml文件即可。文件配置如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;ehcache&gt;</span><br><span class="line">    &lt;cache name=&quot;objectCache&quot; maxElementsInMemory=&quot;1000&quot;&gt;&lt;/cache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure>
<h1 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h1><p>此时，springboot已经为ehcacheManager生成了一个Bean。我们在自己需要的地方直接注入即可。下面是我的简单utils文件和存数据取数据的地方，仅供参考。有不对的地方，欢迎指正。  </p>
<p>util如下，只提供set和get方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class EHCacheUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 设置缓存对象</span><br><span class="line">     * @param cacheManager</span><br><span class="line">     * @param key</span><br><span class="line">     * @param object</span><br><span class="line">     */</span><br><span class="line">    public static void setCache(CacheManager cacheManager,String key,Object object)&#123;</span><br><span class="line"></span><br><span class="line">        Cache cache = cacheManager.getCache(&quot;objectCache&quot;);</span><br><span class="line">        Element element = new Element(key,object);</span><br><span class="line">        cache.put(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从缓存中取出对象</span><br><span class="line">     * @param cacheManager</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Object getCache(CacheManager cacheManager,String key)&#123;</span><br><span class="line">        Object object = null;</span><br><span class="line">        Cache cache = cacheManager.getCache(&quot;objectCache&quot;);</span><br><span class="line">        if(cache.get(key)!=null &amp;&amp; !cache.get(key).equals(&quot;&quot;))&#123;</span><br><span class="line">            object = cache.get(key).getObjectValue();</span><br><span class="line">        &#125;</span><br><span class="line">        return object;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>存入缓存方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private CacheManager cacheManager;</span><br><span class="line">//部分关键代码</span><br><span class="line">EHCacheUtils.setCache(cacheManager,&quot;op&quot;,searchOP);</span><br></pre></td></tr></table></figure></p>
<p>取出缓存方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private CacheManager cacheManager;</span><br><span class="line">Operator searchOP = (Operator) EHCacheUtils.getCache(cacheManager,&quot;op&quot;);</span><br></pre></td></tr></table></figure></p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>个人觉得，springboot提供的基于注解的方式进行缓存更加适合拦截器的方式去处理。对应指定的请求均去走设置了缓存机制的service方法，该sevice会根据实际情况去直接取缓存或者查询数据库。<br>后续再做研究，可能比目前的方法更好。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
            <tag> EHCache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈bootstrapvalidator(基于Thymeleaf)]]></title>
      <url>/2018/01/17/%E6%B5%85%E8%B0%88bootstrapvalidator-%E5%9F%BA%E4%BA%8EThymeleaf/</url>
      <content type="html"><![CDATA[<blockquote>
<p>因为最近开发的项目前端使用了bootstrap框架，在前台数据校验的时候就考虑了bootstrapvalidator，整体效果不错，基本上可以快速的实现校验功能。</p>
</blockquote>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="http://upload-images.jianshu.io/upload_images/9493059-2569766da15bf26e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前台校验.png"><br><img src="http://upload-images.jianshu.io/upload_images/9493059-5f462c227f5bae28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台数据校验.png"></p>
<h1 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h1><ol>
<li>导入所需css和js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;static/assets/bootstrapvalidator/css/bootstrapValidator.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;static/assets/bootstrapvalidator/js/bootstrapValidator.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>所需资源可以去官方下载，嫌麻烦的话，可以直接从我提供的百度云盘进行下载：链接：<a href="https://pan.baidu.com/s/1mjhovjy" target="_blank" rel="noopener">https://pan.baidu.com/s/1mjhovjy</a> 密码：atwy</p>
<ol>
<li>进行前端校验，实现代码如下，仅供参考。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#loginForm&quot;).bootstrapValidator(&#123;</span><br><span class="line">                   submitHandler: function (valiadtor, loginForm, submitButton) &#123;</span><br><span class="line"></span><br><span class="line">                       valiadtor.defaultSubmit();</span><br><span class="line">                   &#125;,</span><br><span class="line">                   fields:&#123;</span><br><span class="line">                       username:&#123;</span><br><span class="line">                           validators:&#123;</span><br><span class="line">                               notEmpty: &#123;</span><br><span class="line">                                   message: &apos;用户名不能为空&apos;</span><br><span class="line">                               &#125;,</span><br><span class="line">                               stringLength: &#123;</span><br><span class="line">                                   /*长度提示*/</span><br><span class="line">                                   min: 4,</span><br><span class="line">                                   max: 30,</span><br><span class="line">                                   message: &apos;用户名长度必须在4到30之间&apos;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;,</span><br><span class="line">                       password:&#123;</span><br><span class="line">                           validators:&#123;</span><br><span class="line">                               notEmpty: &#123;</span><br><span class="line">                                   message: &apos;密码不能为空&apos;</span><br><span class="line">                               &#125;,</span><br><span class="line">                               stringLength: &#123;</span><br><span class="line">                                   /*长度提示*/</span><br><span class="line">                                   min: 4,</span><br><span class="line">                                   max: 30,</span><br><span class="line">                                   message: &apos;密码长度必须在4到30之间&apos;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="后台数据校验"><a href="#后台数据校验" class="headerlink" title="后台数据校验"></a>后台数据校验</h1><blockquote>
<p>这里基于Thymeleaf，点击确认的时候会将一个表单数据整体提交给后台controller，进行数据处理之后，将数据存放到modelmap里面返回给前台，前台根据具体的返回数据做出对应的校验展示。</p>
</blockquote>
<h2 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h2><p>mybatis和spring的整合，先进行service层的实现：根据登录名进行查询，能查询到则返回对象的详细信息，否则返回null。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class OperatorSereviceImpl implements OperatorSerevice&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OperatorMapper operatorMapper;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询操作员详细信息</span><br><span class="line">     * @param op 传入的操作员查询信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Operator queryOperator(Operator op) &#123;</span><br><span class="line">        //通过username查询操作员</span><br><span class="line">        String username = op.getUsername();</span><br><span class="line">        OperatorExample example = new OperatorExample();</span><br><span class="line">        example.createCriteria().andUsernameEqualTo(username);</span><br><span class="line">        List&lt;Operator&gt; operatorList = operatorMapper.selectByExample(example);</span><br><span class="line">        if(operatorList!=null &amp;&amp; operatorList.size()&gt;0)&#123;</span><br><span class="line">            return operatorList.get(0);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于注解的相关知识暂不多说。之后，则需要在controller层进行逻辑的处理，这里我们约定错误返回数据分为错误码和错误信息两个属性。其中错误码为1表示用户不存在，错误码为2表示密码错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/main&quot;)</span><br><span class="line">    public String main(ModelMap model, HttpServletRequest request, Operator op)&#123;</span><br><span class="line">        Operator searchOP = operatorSerevice.queryOperator(op);</span><br><span class="line">        if(searchOP==null)&#123;</span><br><span class="line">            model.put(&quot;error&quot;,&quot;该用户不存在！&quot;);</span><br><span class="line">            model.put(&quot;code&quot;,&quot;1&quot;);</span><br><span class="line">            return &quot;admin/login&quot;;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            if(searchOP.getPassword().equals(op.getPassword()))&#123;</span><br><span class="line">                //比较输入密码，此时表示密码正确，跳转到主页面</span><br><span class="line">                return &quot;admin/index&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                model.put(&quot;error&quot;,&quot;输入密码错误！&quot;);</span><br><span class="line">                model.put(&quot;code&quot;,&quot;2&quot;);</span><br><span class="line">                return &quot;admin/login&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="前台处理"><a href="#前台处理" class="headerlink" title="前台处理"></a>前台处理</h2><blockquote>
<p>前台需要接收modelmap里面的两个属性，在js代码里面进行属性的接收，之后直接进行数据的展示处理。</p>
</blockquote>
<ul>
<li>逻辑处理js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * 登录异常信息显示</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function LoginValidator(config) &#123;</span><br><span class="line">    this.code = config.code;</span><br><span class="line">    this.message = config.message;</span><br><span class="line">    this.userName = config.userName;</span><br><span class="line">    this.password = config.password;</span><br><span class="line">    this.initValidator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//0 未授权 1 账号问题 2 密码错误  3 账号密码错误</span><br><span class="line">LoginValidator.prototype.initValidator = function () &#123;</span><br><span class="line">    if (!this.code)</span><br><span class="line">        return;</span><br><span class="line">    if(this.code==0)&#123;</span><br><span class="line">        this.addPasswordErrorMsg();</span><br><span class="line">    &#125;else if(this.code==1)&#123;</span><br><span class="line">        this.addUserNameErrorStyle();</span><br><span class="line">        this.addUserNameErrorMsg();</span><br><span class="line">    &#125;else if(this.code==2)&#123;</span><br><span class="line">        this.addPasswordErrorStyle();</span><br><span class="line">        this.addPasswordErrorMsg();</span><br><span class="line">    &#125;else if(this.code==3)&#123;</span><br><span class="line">        this.addUserNameErrorStyle();</span><br><span class="line">        this.addPasswordErrorStyle();</span><br><span class="line">        this.addPasswordErrorMsg();</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginValidator.prototype.addUserNameErrorStyle = function () &#123;</span><br><span class="line">    this.addErrorStyle(this.userName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginValidator.prototype.addPasswordErrorStyle = function () &#123;</span><br><span class="line">    this.addErrorStyle(this.password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginValidator.prototype.addUserNameErrorMsg = function () &#123;</span><br><span class="line">    this.addErrorMsg(this.userName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginValidator.prototype.addPasswordErrorMsg = function () &#123;</span><br><span class="line">    this.addErrorMsg(this.password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LoginValidator.prototype.addErrorMsg=function(field)&#123;</span><br><span class="line">    $(&quot;input[name=&apos;&quot;+field+&quot;&apos;]&quot;).parent().append(&apos;&lt;small  data-bv-validator=&quot;notEmpty&quot; data-bv-validator-for=&quot;&apos;+field+&apos;&quot; class=&quot;help-block&quot;&gt;&apos; + this.message + &apos;&lt;/small&gt;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginValidator.prototype.addErrorStyle=function(field)&#123;</span><br><span class="line">    $(&quot;input[name=&apos;&quot; + field + &quot;&apos;]&quot;).parent().addClass(&quot;has-error&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用js接收modelmap数据，需要注意th:inline标签。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class="line">        var message=[[$&#123;error&#125;]];</span><br><span class="line">        var code=[[$&#123;code&#125;]];</span><br><span class="line">        if(message!=&quot;&quot;)&#123;</span><br><span class="line">            new LoginValidator(&#123;</span><br><span class="line">                code:code,</span><br><span class="line">                message:message,</span><br><span class="line">                userName:&apos;username&apos;,</span><br><span class="line">                password:&apos;password&apos;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>综上，实现了基于bootstrapvalidator和thymeleaf框架的登录校验。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Thymeleaf </tag>
            
            <tag> bootstrapvalidator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thymeleaf中js调取变量、模板化及静态资源拦截]]></title>
      <url>/2018/01/16/Thymeleaf%E4%B8%ADjs%E8%B0%83%E5%8F%96%E5%8F%98%E9%87%8F%E3%80%81%E6%A8%A1%E6%9D%BF%E5%8C%96%E5%8F%8A%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8B%A6%E6%88%AA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>公司项目，使用springboot开发，今天在后台与前台通讯过程中，发现几个问题，做简单整理，加深一下印象。</p>
</blockquote>
<h1 id="js调取变量"><a href="#js调取变量" class="headerlink" title="js调取变量"></a>js调取变量</h1><p>后台返回变量之后，在前端进行接收，之后需要在js里面对该变量继续处理，如何在js里面进行变量的接收呢？</p>
<ul>
<li>使用th:inline属性进行javascript的标记。</li>
<li>使用如下方式进行变量数据接收：[[${example}]]</li>
</ul>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script th:inline=&quot;javascript&quot;&gt;</span><br><span class="line">        var message=[[$&#123;error&#125;]];</span><br><span class="line">        var code=[[$&#123;code&#125;]];</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注意：<br>在使用script的标签的时候，一定要使用th:inline属性进行标记，否则不会引用到。</p>
<h1 id="静态资源路径"><a href="#静态资源路径" class="headerlink" title="静态资源路径"></a>静态资源路径</h1><blockquote>
<p>由于默认springmvc对所有的请求都做了拦截。因此，当我们访问一个本地静态资源的话，springmvc拦截器依旧会将请求拦截到。从而造成数据的访问失败。很显然，这不是我们希望的结果。  </p>
</blockquote>
<p>万幸的是，早在springmvc的时候就spring团队就已经给我们提供了方案。即—在配置的时候将静态资源的请求进行重新定位。两步走：  </p>
<ol>
<li>继承WebMvcConfigurerAdapter类。</li>
<li>重写addResourceHandlers方法。  </li>
</ol>
<p>在springboot里面怎么去设置呢？其实是一样的，不过，由于springboot完全基于注解，无法从web.xml里面进行配置，只能新建配置类。如下为我的配置类，仅供参考：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebConfiguration extends WebMvcConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/admin/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意，需要加入Configuration注解，告诉spring框架这是一个配置类。<br>如上代码表示，假如收到以admin/static开头的url请求，会将该请求定位到classess/static文件夹。</p>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>我们在使用jsp编写前端页面的时候，会采用分模块的形式，将一个页面里面重复的头和尾部代码提取出来。使用include标签将该页面进行引入，这样做是整个页面的后期修改和完善更加的灵活。那么，对于Thymeleaf而言，存在这种神器吗？  </p>
<p>答案当然是肯定的。  </p>
<ol>
<li>使用th:fragment标签进行模板的定义</li>
<li>使用th:include标签进行模板的引入。</li>
</ol>
<p>示例代码如下：<br>mainfragment.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:fragment=&quot;top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;chl-poster simple&quot; id=&quot;header&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>下面进行该模板的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:include=&quot;mainfragment ::nav&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>其中，mainfragment 为引入文件名，nav为模板名。<br>需要注意：文件名需要带路径，假如mainfragment 存在上级文件夹，将文件夹路径全部写入才行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:include=&quot;base/mainfragment ::nav&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring和MyBatis整合自动生成代码里面text类型坑]]></title>
      <url>/2018/01/15/Spring%E5%92%8CMyBatis%E6%95%B4%E5%90%88%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E9%87%8C%E9%9D%A2text%E7%B1%BB%E5%9E%8B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>Spring和MyBatis整合以后，使用自动生成代码工具生成dao和mapper配置文件，生成步骤如下（以Intelli idea为例）。</p>
<ol>
<li><p>编写生成代码配置文件generatorConfig.xml。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;classPathEntry location=&quot;D:\dev\maven\repository\mysql\mysql-connector-java\5.1.39\mysql-connector-java-5.1.39.jar&quot;/&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot; defaultModelType=&quot;flat&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/mycollege?characterEncoding=utf-8&quot;</span><br><span class="line">                        userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;root&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 生成模型的包名和位置  --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.cx.elearnning.model&quot;</span><br><span class="line">                            targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- generate xml --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;/&quot;</span><br><span class="line">                         targetProject=&quot;src/main/resources/mapper&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- generate Mapper --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.cx.elearnning.dao&quot;</span><br><span class="line">                             targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">      &lt;!--需要自动生成的表名和对应的model名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;sys_user&quot; domainObjectName=&quot;SysUser&quot;&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置如下maven运行命令。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-beb480ae437a803a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="maven运行命令.png"></p>
</li>
<li>运行generatorcode即可。<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1>假如数据库表里面存在text或者blob字段。自动生成的数据库配置文件如下，会多出几个以withBlobs结尾的方法和resultMap：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--仅仅贴上不一样的部分--&gt;</span><br><span class="line">&lt;resultMap extends=&quot;BaseResultMap&quot; id=&quot;ResultMapWithBLOBs&quot; type=&quot;com.cx.elearnning.model.EduWebsiteProfile&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      WARNING - @mbggenerated</span><br><span class="line">      This element is automatically generated by MyBatis Generator, do not modify.</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;result column=&quot;DESCIPTION&quot; jdbcType=&quot;LONGVARCHAR&quot; property=&quot;desciption&quot; /&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;selectByExampleWithBLOBs&quot; parameterType=&quot;com.cx.elearnning.model.EduWebsiteProfileExample&quot; resultMap=&quot;ResultMapWithBLOBs&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      WARNING - @mbggenerated</span><br><span class="line">      This element is automatically generated by MyBatis Generator, do not modify.</span><br><span class="line">    --&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;if test=&quot;distinct&quot;&gt;</span><br><span class="line">      distinct</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">    ,</span><br><span class="line">    &lt;include refid=&quot;Blob_Column_List&quot; /&gt;</span><br><span class="line">    from edu_website_profile</span><br><span class="line">    &lt;if test=&quot;_parameter != null&quot;&gt;</span><br><span class="line">      &lt;include refid=&quot;Example_Where_Clause&quot; /&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;orderByClause != null&quot;&gt;</span><br><span class="line">      order by $&#123;orderByClause&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>假如此时查询数据或者更新数据的使用仍然使用selectByExample或者updateByExample，得到的text或者blob数据是null。  </p>
<h1 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h1><p>应该使用selectByExampleWithBLOBs或者updateByExampleWithBLOBs这两个方法。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> mybatis </tag>
            
            <tag> 自动生成代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java扫盲（二）说equals和双等]]></title>
      <url>/2018/01/14/java%E6%89%AB%E7%9B%B2%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AF%B4equals%E5%92%8C%E5%8F%8C%E7%AD%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>请说一下equals和==的区别  </p>
</blockquote>
<p>根据我几次换工作的经验，无数次面试的经验。假如，你去面java，该问题属于必问题。那么，他们之间到底有啥区别呢？<br>先上一段代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int a =1;</span><br><span class="line">int b=1;</span><br><span class="line">String c = &quot;aaa&quot;;</span><br><span class="line">String d = &quot;aaa&quot;;</span><br><span class="line">System.out.println(a==b);</span><br><span class="line">System.out.println(a.equals(b));</span><br><span class="line">System.out.println(c==d);</span><br><span class="line">System.out.println(c.equals(d));</span><br></pre></td></tr></table></figure></p>
<p>输出结果如下： true/true/false/true</p>
<p>跟你想象的结果是否一致呢？</p>
<h1 id=""><a href="#" class="headerlink" title="=="></a>==</h1><p>其实，==作用于基础数据类型，比如int、long、float等。<br>这些数据类型的共同点即基础数据类型。而Strng、Integer为java提供给我们的一组对象。<br>说到对象，在进行比较的时候如果使用==运算符，那么比较的就不仅仅是对象的值了，还需要比较对象的内存地址。因为上述例子中的两个string均是new出来的一个对象，也就是说对于的内存地址是不一致的，因此得到的结果是false。</p>
<h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><p>equals用于比较两个对象的值，上述例子中，使用equals去比较两个对象的值，均为aaa，因此返回值为false。</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>在java编码过程中，有时候需要用一个对象给另外一个对象赋值。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student a  = new Student();</span><br><span class="line">Student b = a;</span><br></pre></td></tr></table></figure></p>
<p>这时候，就把a整个赋值给了b，包括内存地址。<br>这样做的后果是，假如在其他地方对a对象进行了操作，b对象对应的也会发生改变。<br>正确做法应该是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student a  = new Student();</span><br><span class="line">Student b = new Studnet();</span><br><span class="line">b.setXXX(a.getXXX());</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> equals </tag>
            
            <tag> 双等 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java基础扫盲（一）字节字符和位]]></title>
      <url>/2018/01/12/java%E5%9F%BA%E7%A1%80%E6%89%AB%E7%9B%B2%EF%BC%88%E4%B8%80%EF%BC%89%E5%AD%97%E8%8A%82%E5%AD%97%E7%AC%A6%E5%92%8C%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h1 id="历史问题"><a href="#历史问题" class="headerlink" title="历史问题"></a>历史问题</h1><p>大家都知道计算机这东西是洋鬼子搞出来的，他的底层实现是二进制。也就是说，计算机里面，二进制，简简单单的0和1可以表示世间万物，可以创造世间万物。</p>
<blockquote>
<p>一生二，二生三，三生万物。</p>
</blockquote>
<p>不知道创造者是否参考过我大中华博大精深的文化。</p>
<h2 id="位"><a href="#位" class="headerlink" title="位"></a>位</h2><p>这里说的位就是指的二进制位了，也就是说的0或者1。他们都可以表示一位。英文名就是bit了。</p>
<h2 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h2><p>字节其实就是一个单位，我们通过单位知道文件的大小。这就好比你上菜市场卖肉的时候问店家猪肉多少钱一斤一样，在计算机的世界里面，我们经常会问猪肉多少钱一字节。如果你知道一斤猪肉大体上有多大，够炒几个菜。那么你就大概了解一字节的文件大体上有多大，能装的下几个字儿了！<br>其实，我们平时接触的比较多的是M，K还有G。是吧？<br>其实，他们都是计量单位。字节的英文表示为byte（为什么我输入byt的时候，搜狗给我提示的避孕套呢？）。他们之间的转化关系如下：</p>
<ul>
<li>1G=1024M</li>
<li>1M=1024K</li>
<li>1K=1024byte</li>
</ul>
<p>好了，大家清楚他们之间的关系了吧？我们平时的流量套餐呢？1G？大概就是1<em>1024</em>1024=1048576KB了。假如，我们平时浏览一篇文章用20k，看一张图片用40K，听一首歌用3M，看一部电影用100M。能用多少流量，大家自己算去吧！<br>那么，字节和位之间存在关系吗？<br>当然存在，只要在计算机的世界里面出现的任何东西，都和位存在关系！<br>一个字节等于8位。就是说8个0和1的组合表示一个字节。<br>00000000    11111111  都可以表示一个字节。</p>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>字符简单了！就是我们平时看到的一切字母、符号、中文、法文、日文等等。c是个字符、中也是个字符。<br>说到字符呢，就不得不说一下编码格式了。这里只说一下比较常用的编码格式，其他的编码格式，大家可以自行百度理解研究。</p>
<ol>
<li>ASCII<br>洋鬼子最早搞出来的编码格式。该编码下，一个字符需要一个字节表示，也就是说占8位。这样的话有256中0和1的组合方式，可以表示256个不同的字母。对于，英文而言就绰绰有余了。</li>
<li>UNICODE<br>显然，洋鬼子在设计ASCII码的时候没有考虑到遥远的东方，存在博大精深的文化。新华字典里面的汉字有多少个？显然256是远远不够的！那平方呢？65535？够了吧？还不够？<br>这里就说到一个网络上经常出现的一个问题，UNICODE编码里面，一个汉字占几位的问题。很多老程序员会这么说：“一个汉字占两个字节！”<br>在GBK编码里面是2个字节，但是在unicode编码里面是不对的！其实，很多时候，汉字占几个自己完全取决于编码格式。编码格式也不难写，因此对于汉字的编码有多种说法：ubuntu12.04里面一个汉字是三个字节！  </li>
</ol>
<blockquote>
<p>它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。  </p>
</blockquote>
<p>如上，unicode编码的描述。<br>就是说，在unicode编码下，一个汉字可能是2个字节，也可能是3个或者是4个字节。  </p>
<ol>
<li>utf8<br>该编码格式我们是不是经常用到呢？<br>该编码格式其实是基于unicode。确实，unicode被很多编码格式拿来做基础编码。<br>在utf8编码格式下，英文字母占一个字节，和ascii完全相同。<br>汉字或者是其他字符占1-4个字节。  </li>
</ol>
<h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><p>这里我们说一下java中的char类型。<br>在java中，char类型占2个字节，16位。<br>可以采取如下方式为char类型变量赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char a=&apos;a&apos;;  //任意单个字符，加单引号。</span><br><span class="line"></span><br><span class="line">char a=&apos;中&apos;;//任意单个中文字，加单引号。</span><br><span class="line"></span><br><span class="line">char a=111;//整数。0~65535。十进制、八进制、十六进制均可。输出字符编码表中对应的字符。</span><br><span class="line"></span><br><span class="line">注：只能放单个字符。</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字节 </tag>
            
            <tag> 字符 </tag>
            
            <tag> 位 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring中autowired和resource注解的区别]]></title>
      <url>/2018/01/10/spring%E4%B8%ADautowired%E5%92%8Cresource%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>autowired和resource注解都可以将bean注入。<br>最大的不同之处在于：<br>autowired：</p>
<ol>
<li>该注解由spring提供。</li>
<li>该注解通过类型来查找bean。<br>resource</li>
<li>该注解由java提供。</li>
<li>该注解通过name来查找bean。</li>
</ol>
<h1 id="resource注解举例："><a href="#resource注解举例：" class="headerlink" title="resource注解举例："></a>resource注解举例：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">Test t;</span><br></pre></td></tr></table></figure>
<p>该bean注入过程如下：<br>先查找name为test的bean，如果查询不到，则会查询类型为Test的bean。<br>假如指定了name，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Resource(name=&quot;test123&quot;)</span><br><span class="line">Test t;</span><br></pre></td></tr></table></figure></p>
<p>只要此处指定了name属性，那么只会查询name为test123的bean，查询不到即查询不到，报找不到bean的错误。</p>
<h1 id="autowired注解举例"><a href="#autowired注解举例" class="headerlink" title="autowired注解举例"></a>autowired注解举例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">Test t;</span><br></pre></td></tr></table></figure>
<p>查找类型为Test的bean，查询不到就会报错。<br>如果想要指定使用name查询，则需要配合Qualifier注解使用，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired @Qualifier(&quot;baseDao&quot;)</span><br><span class="line">Test t;</span><br></pre></td></tr></table></figure></p>
<p>首先查询类型为Test的bean，如果查询不到则会查询name为baseDao的bean。还查询不到，就会报错了。<br>另外，Autowired注解可以指定是否为null，使用required=false属性来指定。此时，该bean即使为null也不会报错。配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired(required=false) @Qualifier(&quot;baseDao&quot;)</span><br><span class="line">Test t;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> 注解 </tag>
            
            <tag> autowired </tag>
            
            <tag> resource </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring和springmvc的区别]]></title>
      <url>/2018/01/10/spring%E5%92%8Cspringmvc%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<ul>
<li>spring是个容器，其主要特征是IOC和AOP。</li>
<li>springmvc则是mvc架构的mvc框架，主要特征是modelandview传过来的数据和页面综合体，前台可以很舒服的将页面和数据组织并展示出来。目前，该mvc框架搭配自己公司出品的Thymleaf框架，更加锋利。</li>
</ul>
<blockquote>
<p>两者同出于一个公司，不同团队。<br>随着spring的慢慢壮大，现在的spring指的是springcore包，springmvc则指的是web包。<br>spring是身体，springmvc则是身体的某个器官，springmvc是属于spring的一部分。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> springmvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[知识焦虑的时代，我们该何去何从？]]></title>
      <url>/2018/01/10/%E7%9F%A5%E8%AF%86%E7%84%A6%E8%99%91%E7%9A%84%E6%97%B6%E4%BB%A3%EF%BC%8C%E6%88%91%E4%BB%AC%E8%AF%A5%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h1 id="只有改变才能看见未来"><a href="#只有改变才能看见未来" class="headerlink" title="只有改变才能看见未来"></a>只有改变才能看见未来</h1><p>“王老师，我想改行！”<br>前段时间，一个干保险的朋友忽然联系我说道。<br>回想起该朋友至少8年的保险从业经验，我压抑住内心的震惊，问道：“你打算转行做什么？”<br>“互联网啊！”朋友的回复很快，不假思索。<br>我不知道说什么好了，短暂的失神，朋友的回复又接二连三的到来。<br>“现在是互联网时代了，我们这行业长不了！”<br>“领导们交代的任务动不动就是微信接单，互联网接单，近期还在筹划互联网系统！”<br>“王老师，王老师，在吗？我想学编程。”<br>字里行间，我感受到了朋友浓浓的焦虑。对于现在工作生活的倦怠和不满，对于未来的不安，对于不安的无所适从，没有方向。<br>“那就按照你的想法去做吧”、“你不再考虑考虑？”、“先考虑清楚了再说！”聊天界面上，我的措辞删了改，改了再删。<br>确实，我不知道如何去答复这个看起来没有方向处于知识焦虑期的朋友。<br>“先用工作闲暇时间去学习，改行的事儿先别着急下决定！”<br>思躇良久，我回答道。之后，整个人便陷入了深深的思索之中。<br>“只有改变才能看见未来！”老罗的一句话没来由的浮上心头。  </p>
<h1 id="知识焦虑的三个阶段"><a href="#知识焦虑的三个阶段" class="headerlink" title="知识焦虑的三个阶段"></a>知识焦虑的三个阶段</h1><p>朋友的处境相信是部分内心怀揣着梦想与奋斗的有志青年已经面临或者是即将面临的。<br>如何去定义这种处境，暂且称之为知识焦虑吧。<br>作为奋斗在互联网行业的小小码农的我，也经常会面临这种焦虑。比如，朋友介绍了一个价格不菲的关于项目改造的外包，谈着谈着发现自己不会这种编程语言。<br>于是，焦虑感瞬间席卷全身。对于人民币从指间流失的失落感，对于机会从身边错失的无助感兼而有之。不过，更多的是对于知识的焦虑。<br>突然之间，觉得自己要学的东西多到无法想象。用了十几年构建起来的对于自己所处领域以及所在行业的自信遭遇了滑铁卢。<br>结合自身体会，我把知识焦虑归结了三个阶段。  </p>
<ul>
<li>无感期<br>这一阶段，压根就不知道焦虑是什么感觉。从来没想过明天怎么样？后天又如何！得过且过，及时行乐。<br>多见于刚刚大学毕业的学生，当然还有一些不肯长大的中年患者（无可救药）。  </li>
<li>焦虑期<br>这一阶段，觉得自己欠缺的东西太多。需要学习的内容更多。<br>开始长大，开始想通过学习通过努力去改变去创造点什么。<br>但是，没有方向。眉毛胡子一把抓，往往什么也抓不住。<br>时间长了，觉得和无感期相比，付出了不少却什么也没得到。还不如无感期。<br>于是，又不争气的回炉了。<br>过一段时间，又开始焦虑。<br>周而复始，无限循环。  </li>
<li>成熟期<br>首先，恭喜进入这一阶段的人。可以有方向的规划自己的知识体系，并且有效的学习知识了。<br>经历了，无限循环周而复始的知识焦虑期，你得到了应有的回报。<br>得到了一种我觉得世界上最美好最伟大的一种能力。  <blockquote>
<p>自我提升，自我学习的能力。</p>
</blockquote>
</li>
</ul>
<p>三个阶段，循序渐进。区别在于第二个阶段，有些人在该阶段呆的时间长有些人呆的时间短。<br>但是，绝对会、一定会经历。如同人类的进化，没人可以避免，没人可以跨越。  </p>
<h1 id="何去何从？"><a href="#何去何从？" class="headerlink" title="何去何从？"></a>何去何从？</h1><p>在知识焦虑期，我们该何去何从？怎样才能快速稳定的度过这一个时期呢？<br>我总结了如下几个方法，不一定对任何人都适用，但是只要有一个人从中受益，我就知足了。<br>说明我洋洋洒洒码的几千字创造并产生了价值。  </p>
<blockquote>
<p>无以言表，只能偷偷一乐。  </p>
</blockquote>
<ol>
<li>自我暗示。  <blockquote>
<p>焦虑期最大的病症就是否定自己的努力。</p>
</blockquote>
</li>
</ol>
<p>程序员觉得自己用到的技术太老，不够先进。google一番，忽然发现瞬间诞生了如此多的新技术，这名词那名词的自己压根以前就没听说过。（从我的角度，其他职业参考，病症类似。）<br>于是，负面情绪就来了，觉得自己之前都在浪费时间，自己的努力都是白费了。<br>这时候，深呼吸，默念。  </p>
<blockquote>
<p>上帝不会偏袒任何虚度光阴之人，上帝不会无视任何挥洒汗水之人。</p>
</blockquote>
<p>反复默念，直到自己的心静下来。  </p>
<blockquote>
<p>做任何事，下任何决定之前，都先要让自己的心静下来。这样，才不会给自己的后悔买单。</p>
</blockquote>
<ol>
<li>写总结笔记。<blockquote>
<p>焦虑期最大的问题就是没有方向。</p>
</blockquote>
</li>
</ol>
<p>如果不能坚持每天一总结，可以一周一总结，一月一总结。<br>根据个人情况安排总结的频率，总结过多容易更加焦虑，总结过少不容易摸清自己的方向。<br>按照自己的实际情况具体而定。  </p>
<ol>
<li>和志同道合的朋友聊天。<blockquote>
<p>聊天可以舒缓自己的压力，也可以通过他人的角度找到自己的方向。</p>
</blockquote>
</li>
</ol>
<p>这里要注意，聊天对象一定要志！同！道！合！<br>还处在无感期的中年患者就不要拿出来交流了。<br>这个时候的对牛弹琴和牛给予的挖苦如同嚼砒霜，会无限延长你的知识焦虑期。<br>如果没有这种朋友，可以找我聊，我会是一个很好的倾听者。</p>
<blockquote>
<p>方法千万种，适合最重要。</p>
</blockquote>
<p>以上三种方法，是我尝试了无数种，发现对我而言最有效的方法。<br>说的再多，就不是我给大家建议，而是让大家做选择题了。<br>希望，给看过的各位起到哪怕一丁点的作用，我即心满意足。<br>预祝，尽快跨过知识焦虑期的大坑。后面即是阳关大道，有无数有趣可爱的知识，等着我们去发现去学习去掌握。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 知识焦虑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老生常谈（程序员如何赚外快）]]></title>
      <url>/2018/01/09/%E8%80%81%E7%94%9F%E5%B8%B8%E8%B0%88%EF%BC%88%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E8%B5%9A%E5%A4%96%E5%BF%AB%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>相对而言，如今是程序员最好的时代。</p>
</blockquote>
<p>得益于天朝无与伦比的互联网发展空间和发展势头，每天产生的互联网项目是一个无法想象的量级。因此，对于渴望通过自己的努力获取一定收益的程序员而言，机会还是非常多的，前提是你够勤劳够努力。<br>无数的人已经投入互联网浪潮，后面计划进入这一行业的人也是前赴后继。通过几年的积累，博主对赚外快的方法简短说明。</p>
<ol>
<li>做网站。<br>目前是内容付费的时代，某某明星说句话得付费才能听到，写点文章得付费才能看到。某某专家录点声音，某某作家发点心灵鸡汤就能卖钱。自媒体的公众号也越发受到的追捧。反观软件行业，特别是非产品的软件，也就是我们说的第二条赚钱之路-做外包。一次做完了，源码扔电脑上，重装系统，然后没了！注意，是没了！<br>一直觉得，程序员是创造梦想和财富的人。我们每一天写的代码都应该创造出财富和价值。当然，我说的是有意义的实质性代码。然而，预期和现实大相径庭。<br>总而言之，做个资源类的网站，通过付费的形式可以进行下载。实现代码的交易，是一条不错的赚钱途径。</li>
<li>外包。<br>外包不仅仅是赚钱，同时积累资源积累人脉。目前，外包的需求量还是很大的，软件报价也是一个笑话，有人50k做有人5k就做。当然，效果肯定不一样。往往甲方是什么都不懂的一类人，不知道如何取舍。因此，他们非常着急的项目往往一而再再而三的拖着。<br>其次，大家应该知道。外包，是觉得公司报价太高才转而找小团队的无奈之选。对于一些不太富裕的甲方，对于工作室小团队的需求量越来越大。但是，他们在选择和报价的时候还是非常无奈的。差距太大，不知道如何取舍。<br>现在看来，正规的工作室越来越受到追捧。什么是，正规的工作室？有自己的服务器（最次也得是个阿里云之类的），有自己的成功案例，这是最起码的条件。<br>很多时候，客户根本就不清楚自己的需求。你给他看一个成功案例，他也许觉得恰好符合自己的要求，这样就合作订单就定下来了。<br>可是，矛盾点就在这里。绝大多数的程序员都是上班的，没时间去捣鼓自己的工作室，也不舍得去买一个服务器。<br>这样的情况造成的后果，就是正规工作室报价越来越高，慢慢的成立成了公司。散兵程序员依旧没饭吃。</li>
<li>好创意去融资。<br>怎么说呢，第三条路风险比较大。博主2017年一整年都在运作一个产品。结果，融资失败，目前正在喝西北风。</li>
<li>展示自己，然后跳槽<br>跳槽也是变相的赚外快嘛！<br>多写写技术文章，github多写点代码。把自己的工作经历整理一下（不是让你夸夸其他，整理一下近几年的项目和代码）</li>
</ol>
<p>总而言之，时间充裕并且态度勤恳的程序员，票子还是大大的有的！近期在组建团队，欢迎大牛入驻。<br>留言区留下联系方式，博主一一拜访。<br>当然，欢迎各位一起探讨该问题。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员 </tag>
            
            <tag> 赚钱 </tag>
            
            <tag> 外包 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springmvc完全注解+sitemesh拦截]]></title>
      <url>/2018/01/08/springmvc%E5%AE%8C%E5%85%A8%E6%B3%A8%E8%A7%A3-sitemesh%E6%8B%A6%E6%88%AA/</url>
      <content type="html"><![CDATA[<h1 id="干掉web-xml"><a href="#干掉web-xml" class="headerlink" title="干掉web.xml"></a>干掉web.xml</h1><blockquote>
<p>基于servelet3.0，完全注解，将web.xml消灭掉。</p>
</blockquote>
<h2 id="WebApplicationInitializer代替web-xml工作"><a href="#WebApplicationInitializer代替web-xml工作" class="headerlink" title="WebApplicationInitializer代替web.xml工作"></a>WebApplicationInitializer代替web.xml工作</h2><p>基于注解的方式，在应用启动之前，使用该类去注册相关拦截器和servlet。这里主要说springmvc的注册，主要是注册dispatcherservlet，初始化web的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class WebInitializer implements WebApplicationInitializer&#123;</span><br><span class="line"></span><br><span class="line">    public void onStartup(ServletContext servletContext) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">        AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();</span><br><span class="line">        //注册springmvc</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        ctx.setServletContext(servletContext);</span><br><span class="line">        ServletRegistration.Dynamic servlet = servletContext.addServlet(&quot;dispatcher&quot;,new DispatcherServlet(ctx));</span><br><span class="line">        //拦截所有请求</span><br><span class="line">        servlet.addMapping(&quot;/&quot;);</span><br><span class="line"></span><br><span class="line">        servlet.setLoadOnStartup(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="springmvc配置"><a href="#springmvc配置" class="headerlink" title="springmvc配置"></a>springmvc配置</h2><p>通过注解的形式进行springmvc的配置，代替原始的springmvc.xml。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * springmvc的配置</span><br><span class="line"> * 注解解释为：</span><br><span class="line"> * 配置类</span><br><span class="line"> * 允许使用springmvc,启用之后会开启一些默认配置，比如ViewResolver</span><br><span class="line"> * 扫描包为com.cx.os</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@ComponentScan(&quot;com.cx.os&quot;)</span><br><span class="line">public class SpringMvcConfig extends WebMvcConfigurerAdapter&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public InternalResourceViewResolver viewResolver()&#123;</span><br><span class="line">        //viewresolver来渲染页面</span><br><span class="line">        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();</span><br><span class="line">        //指定渲染页面路径</span><br><span class="line">        viewResolver.setPrefix(&quot;/WEB-INF/views/&quot;);</span><br><span class="line">        //指定页面格式</span><br><span class="line">        viewResolver.setSuffix(&quot;.jsp&quot;);</span><br><span class="line">        //使用jstl标准进行页面的渲染</span><br><span class="line">        viewResolver.setViewClass(JstlView.class);</span><br><span class="line">        return  viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/statics/**&quot;).addResourceLocations(&quot;/WEB-INF/statics/&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这里涉及到springmvc的一个渲染器和静态资源的注册。</p>
<ol>
<li><p>渲染器：主要有jstl和jsp两种，在设置viewclass之前需要设置渲染页面的路径和页面的格式，使用如下方法进行设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//指定渲染页面路径</span><br><span class="line">       viewResolver.setPrefix(&quot;/WEB-INF/views/&quot;);</span><br><span class="line">       //指定页面格式</span><br><span class="line">       viewResolver.setSuffix(&quot;.jsp&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态资源注册<br>springmvc默认拦截了所有页面请求，同时包括css和js文件。重写addResourceHandlers方法进行资源拦截，其中addResourceHandler为请求路径，addResourceLocations为实际路径。<br>验证静态资源是否设置成功的方式：<br>直接在浏览器访问资源文件如：localhost:8080/statics/js/jquery.js，看是否正常访问到资源。</p>
<h2 id="sitemesh拦截器"><a href="#sitemesh拦截器" class="headerlink" title="sitemesh拦截器"></a>sitemesh拦截器</h2><p>sitemesh3.0提供了基于注解的配置方式，集成ConfigurableSiteMeshFilter之后，重写applyCustomConfiguration方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(filterName = &quot;sitemesh&quot;,urlPatterns = &#123;&quot;/*&quot;&#125;)</span><br><span class="line">public class MySiteMeshFilter extends ConfigurableSiteMeshFilter&#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void applyCustomConfiguration(SiteMeshFilterBuilder builder) &#123;</span><br><span class="line">        //使用decorator.jsp去装配所有的页面</span><br><span class="line">        builder.addDecoratorPath(&quot;/*&quot;,&quot;/decorator.jsp&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其中，webfilter取代web.xml的拦截器。而重写的applyCustomConfiguration方法里面对应的addDecoratorPath方法两个参数分别为，装饰页面和装饰模板。上面代码表示使用decorator.jsp装饰所有页面。这里需要注意一下装饰模板的路径。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>在进行maven打包的时候报错，找不到web.xml文件。通过配置pom文件解决该问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">          &lt;configuration&gt;</span><br><span class="line">            &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</span><br><span class="line">          &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意使用maven tomcat插件的时候，该插件默认打包的web路径为webapp，将展示jsp和html文件放在webapp下面可以正常访问，放到resources下面则不能正常访问。<br>如何去配置打包属性[warSourceDirectory]，暂未找出合理方法<br>见<a href="&quot;http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/run-mojo.html&quot;">apache官方文档</a>，这里面有讲解，暂未找到解决方案。<br>如果，你的资源文件在resources下面，那么只能使用tomcat发布或者将资源文件放到webapp下面。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springmvc </tag>
            
            <tag> sitemesh </tag>
            
            <tag> 注解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于java环境变量]]></title>
      <url>/2018/01/05/%E5%85%B3%E4%BA%8Ejava%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>目前在研究BS架构下面如何进行实现客户机的硬件调用问题。想到的方案为JNI、JNLP和JS调ocx。各种方案具体如何实现以及最终如何选择，后续进展又是如何暂不在本博文的讨论行列。本文仅仅是说一下java环境变量的问题。</p>
</blockquote>
<ul>
<li>环境变量？大哥你确定你不是在逗我？随便一个java基础的人都会啊！万年的java_home（额！这里一定得大写）、classpath和path呗！</li>
<li>确定不是逗你，如果你用的好死不死是jdk1.8的话，且听我慢慢道来。</li>
</ul>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>是这样，博主在探索JNI实现BS架构下的硬件调取的时候，发现了一个神奇的框架，叫做JNA！使用该框架可以优雅快速的进行java调C的功能实现。没啥好说的，只要注意一个问题就行，关于dll的路径问题！千万注意，保证dll和jdk的版本一致性（即32位jdk调取32位dll，64位jdk调取64位dll），存放位置嘛？博主建议将dll放在jdk的bin目录下即可。</p>
</blockquote>
<p>言归正传，就是基于这个问题，出现了我对jdk环境变量的十分疑惑，起初让我懵逼的有点怀疑人生了！我拿到一个32位的dll，然而我的jdk是64位，好死不死的1.8。于是，我得换啊！</p>
<ol>
<li>下载32位jdk</li>
<li>安装</li>
<li>修改环境变量（额！当时用的java_home，这里只要改一下这一个变量路径就好了，classpath和path不用管了，引用的呗！不禁为自己的机智深深的鞠了一躬）</li>
<li>我信息慢慢的输入java -version</li>
</ol>
<blockquote>
<p>神奇的事情发生了！what？竟然还是64位！</p>
</blockquote>
<p>哥们起初还是相当淡定的。有啥大不了的事儿？资深码农哪有一帆风顺的代码？容哥慢慢检查一遍环境变量，将背后的黑手一把揪出来！（博主一直将注意了放在环境变量上面，于是乎，很悲剧！）</p>
<p>郁闷了半小时，百度一下，看看有没有同病相怜的病友吧！果然，一大堆！按照一下操作步骤顺利解决，惊恐的喝了一口鸡汤。这个世界变化太快，不改变永远没有未来。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote>
<p>进入该文件夹C:\ProgramData\Oracle\Java\javapath，会发现里面有三个exe文件，这三个exe文件引发的幺蛾子。把32位的jdk的bin目录对应的三个文件进行替换，之后java -verion就看到了久违的32位了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery中prop和attr的区别]]></title>
      <url>/2018/01/03/jquery%E4%B8%ADprop%E5%92%8Cattr%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天遇到一个奇怪的问题，使用attr给多选框添加checked属性，无效果。通过浏览器查看元素，发现该属性确实已经添加上了，查找原因半天，终于找出问题。</p>
</blockquote>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给多选按钮添加选中效果，css代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.radio:checked + .radio-wrapper-cube .radio-label-cube &#123;</span><br><span class="line">    background: url(&apos;../img/loss_riskmind_checked.png&apos;);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里顺便介绍一下该css干了些什么事儿：</p>
<ol>
<li>首先是class为radio的元素，后面跟:checked表示选中的class为radio的元素。</li>
<li>后面+上一遍博客也已经做了介绍，表示兄弟元素，这里是选择兄弟元素里面class为radio-wrapper-cube的元素。</li>
<li>后面则表示子元素里面class为radio-label-cube的元素。</li>
</ol>
<p>看一下html代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; style=&quot;width:10px;height:10px&quot; class=&quot;radio&quot; name=&quot;checbox&quot; id=&quot;111&quot; value=&quot;111&quot;&gt;</span><br><span class="line">&lt;div class=&quot;radio-wrapper-cube&quot;&gt;</span><br><span class="line"> &lt;label for=&quot;111&quot; class=&quot;radio-label-cube&quot; onclick=&quot;checkboxfun($(this))&quot;&gt;&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>
<p>重点关注圈出来的部分。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-371aa1cf1c050d39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>现在呢，我加一个按钮，实现点击一下，就出现checkbox的选中效果。实现js如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#checkbutton&quot;).click(function() &#123;</span><br><span class="line">		 var maxlength = $(&quot;[name=&apos;checbox&apos;]&quot;).length;</span><br><span class="line">		var selectindex = 0;</span><br><span class="line">		var selectall = true;</span><br><span class="line">		$(&quot;[name=&apos;checbox&apos;]:checked&quot;).each(function()&#123;</span><br><span class="line"></span><br><span class="line">			selectindex++;</span><br><span class="line">			if(maxlength==selectindex)&#123;</span><br><span class="line">				selectall = false;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		$(&quot;[name=&apos;checbox&apos;]&quot;).attr(&quot;checked&quot;,selectall);</span><br><span class="line">			if(selectall)&#123;</span><br><span class="line">				$(&quot;[name=&apos;checbox&apos;]&quot;).parent().parent().addClass(&quot;selected&quot;);</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				$(&quot;[name=&apos;checbox&apos;]&quot;).parent().parent().removeClass(&quot;selected&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里实现的功能为，点击一下全选按钮，实现全部选中的功能，上图以明身份：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-c1cb6a69c7e105ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>出现问题：<br>点击第一次会选中，之后，一直无效。</p>
<h1 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h1><p>原来问题出在这行代码上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;[name=&apos;checbox&apos;]&quot;).attr(&quot;checked&quot;,selectall);</span><br></pre></td></tr></table></figure></p>
<p>查阅资料发现，jquery在1.6之后进行了一些改动，增加了prop属性。当然，对attr属性也做了相关改动，改动如下：</p>
<ol>
<li>jQuery 1.6之前 ，.attr()方法在取某些 attribute 的值时，会返回 property 的值，这就导致了结果的不一致。从 jQuery 1.6 开始， .prop()方法 方法返回 property 的值,而 .attr() 方法返回 attributes 的值。 </li>
<li>例如, selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, 和 defaultSelected 应使用.prop()方法进行取值或赋值。 在jQuery1.6之前，这些属性使用.attr()方法取得，但是这并不是元素的attr属性。他们没有相应的属性（attributes），只有特性(property)。 </li>
</ol>
<p>相关资料见：<a href="&quot;https://m.baidu.com/from=1000953f/bd_page_type=1/ssid=0/uid=0/pu=usm%400%2Csz%40320_1001%2Cta%40iphone_2_7.0_3_537/baiduid=05A2CB1D2D9B7B02C0F1F3CBBF89DC14/w=0_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=11572966020577836600&amp;order=3&amp;fm=alop&amp;tj=www_normal_3_0_10_title&amp;vit=osres&amp;m=8&amp;srd=1&amp;cltj=cloud_title&amp;asres=1&amp;title=.prop(">prop和attr区别API</a>%7CjQueryAPIDocumentation&amp;dict=30&amp;w_qd=IlPT2AEptyoA_yivDVKcCTpsvh0DQCVUugKDKj7&amp;tcplug=1&amp;sec=26627&amp;di=4987dc2a44416920&amp;bdenc=1&amp;tch=124.52.244.541.1.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IJwKM_yRJBzuglI39h47aUbBqUDzf2Sm5&amp;eqid=a09b6f478e35400&amp;qq-pf-to=pcqq.group”)</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> prop </tag>
            
            <tag> attr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJIdea如何进行项目发布（maven插件和tomcat）]]></title>
      <url>/2018/01/01/IntelliJIdea%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%EF%BC%88maven%E6%8F%92%E4%BB%B6%E5%92%8Ctomcat%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>主要介绍如何使用tomcat进行项目的发布，目前主要有两种，分别为（maven插件发布和tomcat发布）。</p>
</blockquote>
<h1 id="maven插件发布"><a href="#maven插件发布" class="headerlink" title="maven插件发布"></a>maven插件发布</h1><blockquote>
<p>个人推荐此种发布方式</p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>添加tomcat插件，需要在pom文件里面进行如下配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- tomcat plugin --&gt;</span><br><span class="line">     &lt;plugin&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">         &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">         &lt;port&gt;8088&lt;/port&gt;</span><br><span class="line">         &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</span><br><span class="line">         &lt;url&gt;http://127.0.0.1/manager&lt;/url&gt;</span><br><span class="line">         &lt;server&gt;tomcat7&lt;/server&gt;</span><br><span class="line">         &lt;contextReloadable&gt;true&lt;/contextReloadable&gt;</span><br><span class="line">         &lt;warSourceDirectory&gt;src/main/webapp&lt;/warSourceDirectory&gt;</span><br><span class="line">         &lt;contextReloadable&gt;false&lt;/contextReloadable&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">     &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>由上图代码可以看到，在pom文件里面可以实现端口号等基础配置。</p>
<ol>
<li>新建运行配置项<br>选择配置编辑<br><img src="http://upload-images.jianshu.io/upload_images/9493059-2ca025406d7e3cc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>选择+按钮，之后选择maven，运行命令填入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tomcat7:run</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/9493059-8528e2bdf5d5d314.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>之后保存即可。<br>单击运行或者调试就可以进行相应的项目发布。</p>
<h1 id="tomcat发布"><a href="#tomcat发布" class="headerlink" title="tomcat发布"></a>tomcat发布</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><p>与maven插件发布方法类似，但是普通tomcat发布的方式不需要引入tomcat插件，直接新建运行配置项即可。<br>新建运行配置项的过程和之前相同，不过选择的时候需要选择tomcatserver，之后选择local，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-20b352ca57c2e431.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>server配置不需要说明，选择好tomcat和jdk，配置一下端口号即可。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-d5741b18f1d19ff7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>deployment这里需要注意，单击后面的+按钮，添加发布项目。选择artifact，之后选择第二个exploded，将我们的项目导入进来。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-3b40a90e0b132625.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>之后，进行项目的启动。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> tomcat </tag>
            
            <tag> IntelliJIdea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo个性化（next主题动态显示subtitle）]]></title>
      <url>/2017/12/30/hexo%E4%B8%AA%E6%80%A7%E5%8C%96%EF%BC%88next%E4%B8%BB%E9%A2%98%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BAsubtitle%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>个人比较喜欢精彩的句子，于是希望自己的next主题博客可以在每次刷新之后显示不一样的subtitle（subtitle我就当成一个分享好句子的地方了，尴尬）。</p>
</blockquote>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ul>
<li>第一次进入博客的效果<br><img src="http://upload-images.jianshu.io/upload_images/9493059-ee1b87cce983a5fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>刷新之后的效果<br><img src="http://upload-images.jianshu.io/upload_images/9493059-e0825602f42c5581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>再次刷新<br><img src="http://upload-images.jianshu.io/upload_images/9493059-e90858ef79db47b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
<p>OK！事不过三，效果就展示到这里，下面说一下我是如何实现的。</p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><blockquote>
<p> 纯干货，因为在网络上现在还没有发现类似的效果。并且，关键问题是，我对swig不熟悉，从未接触过，我是一个后端开发人员。当然，JS还算熟悉。我实现的是后加载，可能熟悉swig的人能提供更好的方案，欢迎指正。</p>
</blockquote>
<ol>
<li>修改hexo的配置文件，主要修改subtitle，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtitle: 我喝过最烈的酒，也放过不该放的手。从前不会回头，往后不会将就。W人生当苦无妨，良人当归即可。W世间文字八万个，唯有情字最杀人。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>句子与句子之间以W分割，后续需要根据该标志位去拆分句子组。</p>
<ol>
<li>修改themes\next\layout_partials下面的header.swig文件。在最开头添加如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> function GetRandomNum(Min,Max)</span><br><span class="line">  &#123;</span><br><span class="line">    var Range = Max - Min;</span><br><span class="line">    var Rand = Math.random();</span><br><span class="line">    return(Min + Math.round(Rand * Range));</span><br><span class="line">  &#125;</span><br><span class="line">function setSidebarMarginTop (headerOffset) &#123;</span><br><span class="line">    return $(&apos;#sidebar&apos;).css(&#123; &apos;margin-top&apos;: headerOffset &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> function getHeaderOffset () &#123;</span><br><span class="line">    return $(&apos;.header-inner&apos;).height() + CONFIG.sidebar.offset;</span><br><span class="line">  &#125;</span><br><span class="line">  window.onload=function()&#123;</span><br><span class="line">    var subtitle = &quot;&#123;&#123;config.subtitle&#125;&#125;&quot;;</span><br><span class="line">     var mytitle = subtitle.split(&quot;W&quot;);</span><br><span class="line">     var max = mytitle.length-1;</span><br><span class="line">     var index = GetRandomNum(0,max);</span><br><span class="line">     var text = mytitle[index];</span><br><span class="line">     $(&quot;#helloTitle&quot;).html(text);</span><br><span class="line">     var headOffset = getHeaderOffset();</span><br><span class="line">     setSidebarMarginTop(headOffset);</span><br><span class="line">   // alert(getHeaderOffset());</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>启动一下，会发现我们的名言警句可以动态改变了。</p>
<h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>主要就是获取一下配置文件里面的subtitle，这里面我们配置的是根据我们定义的规则设置的句子组。然后再网页加载完成之后，获取句子组，然后对句子组split成一个数组对象。然后我们生成一个随机数，根据随机数去获取句子就可以了。<br>一定要注意：<font color="red">随机数是介于0到数组长度减一之间，否则会数组溢出。</font></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -hexo个性化 -next主题 -名句 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS选择器一（+号和checked）]]></title>
      <url>/2017/12/29/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%80%EF%BC%88-%E5%8F%B7%E5%92%8Cchecked%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>虽千万人而吾往矣…</p>
</blockquote>
<h1 id="号选择器"><a href="#号选择器" class="headerlink" title="+号选择器"></a>+号选择器</h1><p>该选择器是相邻兄弟选择器，什么是相邻兄弟选择器呢？<br>即—-两个元素同级别，有同一个父元素，相当于jquery的next。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ul>
<li><p>css代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">h1 + p &#123;margin-top:50px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>html代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;This is a heading.&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is paragraph.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;This is paragraph.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行效果<br><img src="http://upload-images.jianshu.io/upload_images/9493059-d7ce051fc1dbbf87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li>解释<br>body下面的h1和五个p元素为兄弟元素，他们有同一个父元素body。<br>h1+p的话仅仅是选择的其后的第一个p元素，对于其他的p元素无效。<h1 id="checked元素"><a href="#checked元素" class="headerlink" title="checked元素"></a>checked元素</h1>选择所有被选中的元素。仅仅适用于input的多选按钮和单选按钮。<br>比较常用的方式如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input:checked</span><br><span class="line">&#123;</span><br><span class="line">background-color: #ff0000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此时，所有被选中的单选按钮和多选按钮都会改变背景色。</p>
<h2 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h2><font color="red">该选择器仅仅适用于Opera，对于其他任何浏览器都不适用。</font>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css的+号选择器 </tag>
            
            <tag> checked选择器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用JNA完成调取C接口]]></title>
      <url>/2017/12/28/%E4%BD%BF%E7%94%A8JNA%E5%AE%8C%E6%88%90%E8%B0%83%E5%8F%96C%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用JNI的各位可能受够了中间层的限制严格的JNI文件（就连方法名也要限制），当然，可以使用javac和javah进行自动生成，但是依然比较繁琐。JNA框架便是基于之上，可以让开发者直接去调用C接口方法的一个框架。</p>
</blockquote>
<h1 id="调用步骤"><a href="#调用步骤" class="headerlink" title="调用步骤"></a>调用步骤</h1><h2 id="添加jna支持"><a href="#添加jna支持" class="headerlink" title="添加jna支持"></a>添加jna支持</h2><blockquote>
<p>基于maven的项目，可以在pom文件里面将jar包直接引入。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;net.java.dev.jna&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jna&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>非maven项目，则可以将jar包下载下来，添加到自己的项目里面。</p>
</blockquote>
<h2 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h2><ol>
<li>将dll文件加载进JVM（使用Native属性加载）。加载方式如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLibrary INSTANCE = (CLibrary) Native.loadLibrary(&quot;PR2&quot;, CLibrary.class);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>2.方法声明，依照dll提供的接口，声明方法即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public boolean CITIC_PR2_CloseComPort();</span><br><span class="line">public boolean CITIC_PR2_OpenComPort(int port, long BaudRate, char Parity, char ByteSize, char StopBits);</span><br></pre></td></tr></table></figure></p>
<p>注意：接口名和参数数量和类型一定要做到和接口文件一致，这样才可以做到正常调用。</p>
<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>使用CLibrary直接调取即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean open()&#123;</span><br><span class="line">       boolean result = CLibrary.INSTANCE.CITIC_PR2_OpenComPort(3,9600,&apos;N&apos;,&apos;8&apos;,&apos;1&apos;);</span><br><span class="line">       return result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="关于dll加载"><a href="#关于dll加载" class="headerlink" title="关于dll加载"></a>关于dll加载</h2><blockquote>
<p>比较头大的问题就是加载路径。在这之前，首先一定要搞清楚自己的dll是32位还是64位，非常关键，因为这涉及到我们采用什么样的jdk去调用的问题。实验之后，得到如下结果：32位的jdk调用32位的dll，64位jdk调用64位dll。否则会报dll无法找到的错误。</p>
</blockquote>
<h2 id="关于dll存放位置"><a href="#关于dll存放位置" class="headerlink" title="关于dll存放位置"></a>关于dll存放位置</h2><blockquote>
<p>个人建议32位dll直接放到32位的jdk目录下面的bin文件夹。64位放到64位的jdk目录的bin文件夹。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> JNA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用IntelliJIDEA编写JAVASWING]]></title>
      <url>/2017/12/28/%E4%BD%BF%E7%94%A8IntelliJIDEA%E7%BC%96%E5%86%99JAVASWING/</url>
      <content type="html"><![CDATA[<blockquote>
<p>java Swing程序，之前在eclipse编写，没用过编辑器，切换到IntelliIDEA之后，一次偶然机会，需要写一个JNA的本地调用程序，使用其编辑器之后，觉得非常好用，特总结一下，简单说明如何使用。</p>
</blockquote>
<h1 id="新建设计器"><a href="#新建设计器" class="headerlink" title="新建设计器"></a>新建设计器</h1><p>新建文件，new一个GUI的Form，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-5a18e0aaa41d732a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="设计器解释"><a href="#设计器解释" class="headerlink" title="设计器解释"></a>设计器解释</h1><ol>
<li>此时得到一个设计界面，其中主要有如下三部分，左边为组件属性栏，中间为设计界面，右边为组件栏。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-0454fc3b280879b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>拖动组件栏的组件，将其放到中间的设计界面即可。</li>
<li>点击设计界面的任意组件，在组件属性栏均可以看到该组件的属性。其中fieldname可以设置组件的ID，text可以设置显示内容。两个align属性可以设置组件布局方式。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-4da906c4d98d1ed3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><h1 id="代码自动完成"><a href="#代码自动完成" class="headerlink" title="代码自动完成"></a>代码自动完成</h1></li>
<li>设计完成之后，可以在java类里面按下alt+insert键进行代码的自动插入，选择FormMain即可。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-f6ef52b19daa2431.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li><p>自动生成如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JFrame frame = new JFrame(&quot;TestJNAForm&quot;);</span><br><span class="line">frame.setContentPane(new TestJNAForm().jpanel);</span><br><span class="line">frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">frame.pack();</span><br><span class="line">frame.setVisible(true);</span><br></pre></td></tr></table></figure>
</li>
<li><p>给组件绑定事件方式，右键指定组件，选择createlistener或者在选中组件的时候，按下ctrl+o键，在弹出的事件列表里面选择自己需要创建的事件，之后会自动生成如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">close.addMouseListener(new MouseAdapter() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void mouseClicked(MouseEvent e) &#123;</span><br><span class="line">              jna.close();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="控制弹出swing窗口大小，在main方法里面添加如下代码，可以设置大小及弹出位置："><a href="#控制弹出swing窗口大小，在main方法里面添加如下代码，可以设置大小及弹出位置：" class="headerlink" title="控制弹出swing窗口大小，在main方法里面添加如下代码，可以设置大小及弹出位置："></a>控制弹出swing窗口大小，在main方法里面添加如下代码，可以设置大小及弹出位置：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frame.setSize(600,500);</span><br><span class="line">frame.setPreferredSize(new Dimension(600,500));</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IntelliJIDEA </tag>
            
            <tag> JAVASWING </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[intellijidea新建springboot项目]]></title>
      <url>/2017/12/26/intellijidea%E6%96%B0%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>之前使用SpringBoot+Thymleaf+mybatis为架构做了一个简单的网站，一段时间之后，再次使用intellijidea搭建框架竟然生疏到想不起来怎么做，特此，记录一遍，希望下次能够666的完成。</p>
</blockquote>
<h1 id="新建步骤"><a href="#新建步骤" class="headerlink" title="新建步骤"></a>新建步骤</h1><ol>
<li>新建项目project，选择springinitializr，选择next，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-dc51a04e212d69c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>默认为maven构建，填入相关数据即可，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-cd0f87cbcb483a79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>选择使用框架，这里选择core里面的devtools，可以实现热部署。选择前端框架Thymleaf。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-18fe71ece2a15211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="devtools.png"><br><img src="http://upload-images.jianshu.io/upload_images/9493059-5771be29efadb88d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Thymleaf.png"></li>
<li>点击完成。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-f55148f58f7abf30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>新建controller包，新建测试类TestController.jar<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    public String test(Model model, HttpServletRequest request)&#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在resources下面的templates下面新建index.html<br>浏览器输入localhost:8080,看一下是否正常显示页面。</p>
<h1 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h1><p>修改默认端口号，修改配置文件application.properties：<br><code>server.port=80</code></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> intellijidea </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[intellijidea常用maven命令]]></title>
      <url>/2017/12/26/intellijidea%E5%B8%B8%E7%94%A8maven%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>常用的几个maven命令记录如下，作为备忘。</p>
</blockquote>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ol>
<li><p>上传jar包到本地仓库，以阿里支付为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install:install-file -D groupId=com.alipay -D artifactId=sdk-java -D version=20171201160035 -D packaging=jar -D file=d:/alipay-sdk-java20171201160035.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包本地文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package</span><br></pre></td></tr></table></figure>
</li>
<li><p>mybatis自动生成代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-generator:generate -e</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol>
<li>单击右上角的下拉框，进行命令的编辑<br><img src="http://upload-images.jianshu.io/upload_images/9493059-548227d851268a03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>进入编辑页面，点击左上角的加号，新增一个maven命令<br><img src="http://upload-images.jianshu.io/upload_images/9493059-865abc5d423539cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>name写入自己定义的名字，commandline里面写入maven命令，点击保存即可。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-2b7accd992edc80e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> intellijidea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css解释及chrome使用详解]]></title>
      <url>/2017/12/24/css%E8%A7%A3%E9%87%8A%E5%8F%8Achrome%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>简单的说一下CSS，这对入门者而言会有用，CSS大拿们见笑。</p>
</blockquote>
<h1 id="CSS解释"><a href="#CSS解释" class="headerlink" title="CSS解释"></a>CSS解释</h1><h2 id="html和css是如何建立联系的？"><a href="#html和css是如何建立联系的？" class="headerlink" title="html和css是如何建立联系的？"></a>html和css是如何建立联系的？</h2><blockquote>
<p>这一点很重要，做任何事情之前都要明确问题的关键点。做开发更是如此，不去思考，对事情的来龙去脉不去深入理解，写再多代码也是枉然。</p>
</blockquote>
<h3 id="css文件不是必须的。"><a href="#css文件不是必须的。" class="headerlink" title="css文件不是必须的。"></a>css文件不是必须的。</h3><p>我们完全可以把样式写到html里面，比如这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width:100%;color:red&quot;&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>div的样式是可以完成通过style标签去定义的。那么，我们为什么要使用css文件来“画蛇添足”呢？初学者肯定觉得不可思议，写到一个html文件里面多好？省事，方便，也不会出现诸如文件未找到之类的错误。<br>其实，随着我们后续接触项目，慢慢就会发现这其中的奥妙了。</p>
<h3 id="使用css文件的优点"><a href="#使用css文件的优点" class="headerlink" title="使用css文件的优点"></a>使用css文件的优点</h3><p>诸位可以设想一下这样的场景，我有100个html网页，其中顶部的样式完全一样，比如均使用类似百度的样式，右上角的按钮排列样式。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-f5d2da8bfcc3b5c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>我有100个网页，每个网页里面我都需要去添加style吗？就算是复制粘贴也能把人累死。<br>更严重的是，假如后续我改了样式，那么我是不是需要改100遍html网页呢？想想都头大。为了解决这个问题，css文件就应运而生了。我只要这般写网页就可以了：<code>&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</code>，在css文件里面定义test样式就可以了：<code>.test{width:100%;}</code>。<br>如果有一天，客户彪了，提出了新的需求，要求width全部改成50%，我们只需要改一下css文件就好了：<code>.test{width:50%}</code><br>综上，css文件的好处显而易见：</p>
<ol>
<li>消灭重复代码</li>
<li>修改需求方便</li>
</ol>
<h3 id="html和css建立联系"><a href="#html和css建立联系" class="headerlink" title="html和css建立联系"></a>html和css建立联系</h3><blockquote>
<p>废话落落了那么多，具体是如何建立联系的呢？</p>
</blockquote>
<ol>
<li>使用link标签将css文件引入进来</li>
<li>css文件里面定义样式</li>
<li>html里面使用样式</li>
</ol>
<h2 id="css定义样式的方式"><a href="#css定义样式的方式" class="headerlink" title="css定义样式的方式"></a>css定义样式的方式</h2><h3 id="class定义"><a href="#class定义" class="headerlink" title="class定义"></a>class定义</h3><p>.定义法，在css文件使用<code>.样式名{}</code>的形式来定义样式，在html里面则使用<code>class=&#39;样式名&#39;</code>来引入样式</p>
<h3 id="id定义法"><a href="#id定义法" class="headerlink" title="id定义法"></a>id定义法</h3><p>‘#定义法’，在css文件里面使用<code>#样式名{}</code>的形式来定义样式，在html里面则使用<code>id=&#39;样式名&#39;</code>来引入样式</p>
<h3 id="标签定义法"><a href="#标签定义法" class="headerlink" title="标签定义法"></a>标签定义法</h3><p>标签名定义法，如<code>div{width:100%}</code>或者<code>input{width:100%}</code>，以html标签直接定义，之后只要通过link将文件成功引入，那么对应的所有的标签都会使用该样式。</p>
<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><blockquote>
<p>一定要记得在样式名中间加空格，非常重要。否则就引用不到。</p>
</blockquote>
<p>通过了解上文说的定义样式的方式，相信这里就非常好理解了，举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.a .b .c &#123;</span><br><span class="line">这里表示样式a之下样式b之下样式c的样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对应的html应该这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;a&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;b&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;c&quot;&gt;</span><br><span class="line">      其中的元素会使用css里面的样式</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;aaaa&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;b&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;c&quot;&gt;</span><br><span class="line">      这里面的元素则不会使用css里面的样式</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br></pre></td></tr></table></figure></p>
<p>假如，我的css文件这样写，就会全部生效了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.c&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样，我可以混合样式的定义方式使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.a #abc&#123;&#125;</span><br><span class="line">.a div&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="chrome的使用"><a href="#chrome的使用" class="headerlink" title="chrome的使用"></a>chrome的使用</h1><blockquote>
<p>chrome是html的神器了，可以即时的修改css，查看样式，同时还可以调试脚本，好用的一塌糊涂。</p>
</blockquote>
<h2 id="f12"><a href="#f12" class="headerlink" title="f12"></a>f12</h2><p>按一下f12键，一切网页无法遁形：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-64be5096ee89e03e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>介绍一个各个功能栏</p>
<h3 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h3><p>这里可以查看到所有的元素：<br>鼠标滑到每一个标签，左侧的网页都会高亮显示：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-f84b00a847393331.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>同时我们还可以看到css：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-e238d6aa021569ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>红框框起来的地方为css，当然，我们可以修改css，左侧实时就显示出效果了，比如，我们把float浮动效果去掉：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-5d64f6ffbe1f4c3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>是不是变得不一样了？</p>
<h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><p>此为控制台，主要打印日志，js日志可以从这里打印出来。报错信息也可以打印出来：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-8f20fd5df3995c13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>我修改一下css引用路径：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-ece82cc007deab4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>再打开网页，在控制台就报错了：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-70442524420519e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>报错信息为：无法加载文件，错误在第五行。</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>此为资源展示界面，可以在该界面进行js的调试。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-840d2a639ef6a4dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>比如，我在第七行加一个断点，f5刷新之后，程序会在第七行停止，然后等待我们去执行。<br>左下方的两个常用按钮为跳到下一个断点，和跳到下一行。假如我们定义了两个断点，第一个按钮点击之后就会到下一个断点。第二个按钮则会到下一行。</p>
<p>简单说这些，希望对初学者有帮助。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小王子的眼泪]]></title>
      <url>/2017/12/24/%E5%B0%8F%E7%8E%8B%E5%AD%90%E7%9A%84%E7%9C%BC%E6%B3%AA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果有人爱上了一朵花，天上的星星有亿万颗，而这朵花只长在其中一颗上，这足以让他在仰望星空时感到很快乐。他会告诉自己：在星空的某处有我的花。但如果绵羊把花吃掉了，对他来说就等于所有的星星突然熄灭了！</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/9493059-745d1224d54ab1b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="世界上属于我的花.png"></p>
<p>我仿佛看到了一个孩子在低声的倾诉，没有咆哮，没有眼泪甚至没有大声呼喊，只是低声的诉说。却足以让任何听到他声音的人动容。我印象中的小王子，一定有一双清澈如水的眼睛，一定要有从容的气质。他说话的时候一脸的认真，并且肯定注视着对方的眼睛，一眨不眨。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-6fcd60601d2d68c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="梵高的星空.png"></p>
<p>忽然想到了前几天看的至爱梵高，很难想象，全世界都无法理解自己时候的孤苦无依。特别是，周围熙熙攘攘，全部都是人，但好像又全都不是人。全都是怪物，无法理解自己的怪物。全世界的星星全部熄灭了，恰好又让自己一个人看到了，大概就是这种心情吧。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-71011e89b6c94ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="每个人心中都拥有属于自己的烟花.png"></p>
<p>2017年很快就要过去了，对我这种人而言需要刻骨铭心去记住的事情不多。无非是2016年傲寒的降生，2017年傲寒又长了一岁罢了。再让我感到心情好一点的就是2016年可以枕着《大鱼海棠》和《你的名字》安静的去怀念，2017年可以拥抱着《至爱梵高》和《烟花》努力的去感同身受，之后又努力的让全世界的星星再次点亮吧。<br>2018，抬头仰望星空的时候一定要很快乐，一定要记得微笑。  </p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -小王子 -至爱梵高 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot在Ubuntu下以服务方式启动]]></title>
      <url>/2017/12/23/SpringBoot%E5%9C%A8Ubuntu%E4%B8%8B%E4%BB%A5%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用springboot+thymleaf开发了一个小网站，计划布到Ubuntu的系统下。如果采用java -jar的方式启动，关掉远程之后，网站随之关闭。需要采用服务的方式在后台启动。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p>见<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html" target="_blank" rel="noopener">官网介绍</a></p>
<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol>
<li>在pom文件中加入如下描述：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;executable&gt;true&lt;/executable&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<ol>
<li>打包为jar包并上传到远程服务器Ubuntu系统。</li>
<li>创建连接，使用ln -s命令，具体如下：<br><code>sudo ln -s 【jar路径】 /etc/init.d/myapp</code></li>
<li>启动程序即可<code>service myapp start</code><br>上述步骤即可完成服务的发布和启动，常用命令为start启动，stop终止，restart重启。<br>但是，遗憾的是，在Ubuntu的环境下，上述命令并没有正常执行。尝试直接启动jar，使用如下方式：<br><code>【jar包路径】start</code><br>提示，权限不足，给该jar包赋予权限，使用如下命令：<br><code>chmod 777 【jar包路径】</code><br>再次启动，可以正常启动。注意，这里启动的依旧非后台方式。使用如下命令完成服务的后台启动、终止和重启。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/myapp start</span><br><span class="line">sudo /etc/init.d/myapp stop</span><br><span class="line">sudo /etc/init.d/myapp restart</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 服务 </tag>
            
            <tag> 启动 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot进行日志配置]]></title>
      <url>/2017/12/23/SpringBoot%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="SpringBoot进行日志配置"><a href="#SpringBoot进行日志配置" class="headerlink" title="SpringBoot进行日志配置"></a>SpringBoot进行日志配置</h1><p>默认情况下，springBoot使用Logback作为日志框架。</p>
<ol>
<li>采用如下的方式进行日志级别的配置：<br><code>logging.level.org.springframework.web=DEBUG</code></li>
<li>采用如下方式设置日志输出目录：<br><code>logging.file=d:/myfile/log.log</code><br>如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-494792ead915ddd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><h1 id="mybatis进行日志配置"><a href="#mybatis进行日志配置" class="headerlink" title="mybatis进行日志配置"></a>mybatis进行日志配置</h1><blockquote>
<p>同时，这里总结一下mybatis如何控制控制台打印SQL语句，这里以log4j为日志框架为例，并且这里说的是传统方式进行日志文件的配置，非springBoot方式。</p>
</blockquote>
</li>
</ol>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender    </span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout    </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n      </span><br><span class="line">log4j.logger.java.sql.ResultSet=INFO    </span><br><span class="line">log4j.logger.org.apache=INFO    </span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG    </span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG    </span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure>
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger = $&#123;log.level&#125;,Console,default,allfile  </span><br><span class="line">log4j.logger.com.ibatis=debug  </span><br><span class="line">log4j.logger.java.sql=debug  </span><br><span class="line">log4j.logger.com.sf.egmas.dcn.web.mapper=debug</span><br></pre></td></tr></table></figure>
<h2 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=info,debug,stdout,info,error  </span><br><span class="line">  </span><br><span class="line">#ibatis logger config  </span><br><span class="line">log4j.logger.com.ibatis=debug  </span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug  </span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug  </span><br><span class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug  </span><br><span class="line">log4j.logger.java.sql.Connection=debug  </span><br><span class="line">log4j.logger.java.sql.Statement=debug  </span><br><span class="line">log4j.logger.java.sql.PreparedStatement=debug</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot - 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thymleaf使用th:each遍历]]></title>
      <url>/2017/12/22/Thymleaf%E4%BD%BF%E7%94%A8th-each%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用该标签完成list或map数据的遍历</p>
<h1 id="后台传参"><a href="#后台传参" class="headerlink" title="后台传参"></a>后台传参</h1><p>标准的springmvc传参的方式，见如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/gwview.html&quot;,method = RequestMethod.GET )</span><br><span class="line">	public String gwview(ModelMap modelMap, HttpServletRequest request) &#123;</span><br><span class="line">      modelMap.put(&quot;gwlist&quot;, gwlist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>使用modelmap，将数据put进去即可。</p>
<h1 id="前台展示"><a href="#前台展示" class="headerlink" title="前台展示"></a>前台展示</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;weui-cell weui-media-box_appmsg&quot;  th:each=&quot;gw,gwstate:$&#123;gwlist&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;weui-media-box__bd&quot;&gt;</span><br><span class="line">         &lt;h4 class=&quot;weui-media-box__title&quot; th:text=&quot;$&#123;gw.name&#125;&quot;&gt;&lt;/h4&gt;</span><br><span class="line">              &lt;p class=&quot;weui-media-box__desc&quot;&gt;发布人：&lt;span&gt;name&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">     &lt;div class=&quot;search-status&quot;&gt;</span><br><span class="line">         &lt;h4 class=&quot;weui-media-box__title&quot; th:text=&quot;$&#123;#dates.format(gw.createTime,&apos;yyyy-MM-dd&apos;)&#125;&quot;&gt;2017-09-09&lt;/h4&gt;</span><br><span class="line">           &lt;p class=&quot;weui-media-box__desc green&quot; th:text=&quot;$&#123;gwstate.first&#125;&quot;&gt;&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h2 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h2><p>在需要重复的地方需要加入th:each标签，注意里面两个参数gw,gwstate，目前第一个gw是定义的list里面的每一个对象，gwstate则是对象参数，注意第二个参数是thymleaf定义的，规定了如下几个参数：</p>
<ul>
<li>index:当前迭代对象的index（从0开始计算）<ul>
<li>count: 当前迭代对象的index(从1开始计算)</li>
<li>size:被迭代对象的大小</li>
<li>current:当前迭代变量</li>
<li>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</li>
<li>first:布尔值，当前循环是否是第一个</li>
<li>last:布尔值，当前循环是否是最后一个<br>当然，gw和gwstate可以自己定义名字，如果你喜欢，可以定义成fuck和fuckstate都是可以的。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> theymleaf </tag>
            
            <tag> th-each遍历 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分体式设备方案整理]]></title>
      <url>/2017/12/22/%E5%88%86%E4%BD%93%E5%BC%8F%E8%AE%BE%E5%A4%87%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>目前分体式设备比较火爆，主要部件为底座和pad。</p>
</blockquote>
<h1 id="部件说明"><a href="#部件说明" class="headerlink" title="部件说明"></a>部件说明</h1><p>解释一下pad和底座</p>
<h2 id="pad"><a href="#pad" class="headerlink" title="pad"></a>pad</h2><p>作为手持端，平常的时候需要插到底座上面，客户办理业务的时候则可以将pad拿下来，拿在手里办理，增强了用户的体验。</p>
<h2 id="底座"><a href="#底座" class="headerlink" title="底座"></a>底座</h2><p>目前工行的方案是分层的原理，将SP的驱动做到了底座上面，驱动常用的硬件模块，包括凭条打印机、四合一读卡器、指纹仪、密码键盘、摄像头。其他模块，比如发卡机则是单独的模块没有做集成。</p>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>目前业界比较流行的方案，也就是工行方案。主要由pad发起交易，通过蓝牙和底座进行通讯，完成基本的二代证读取、卡片信息读取、指纹校验、人脸识别、凭条打印、输入密码等基本功能。底座和pad之间经由蓝牙通讯，之后，底座去调取相关设备。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>首先蓝牙传输的速度太慢，经测试4.0的传输速度在150k左右。</li>
<li>安全性的问题，采用安卓自带的4G模块，需要配置apn和vpn以接入银行内网，这样的话相关的配置信息就存在了android系统上面，存在安全隐患。另外，如果sp做在了底座上面，那么相关的用户敏感信息势必会经过安卓系统，导致敏感信息的泄露。</li>
</ol>
<h1 id="其他方案参考"><a href="#其他方案参考" class="headerlink" title="其他方案参考"></a>其他方案参考</h1><h2 id="HUB通讯"><a href="#HUB通讯" class="headerlink" title="HUB通讯"></a>HUB通讯</h2><blockquote>
<p>pad直接去连接设备，底座不带系统，全部由pad进行硬件的调取。这样做的话，可以将网络和敏感信息类的安全问题规避掉。但是，这样做的话，会存在布线问题，pad没有那么多的U口，势必需要接HUB，然后将所有的硬件模块通过HUB和PAD串联起来。另外，如果这样去调取，实际上做成了一对一的模式，一个pad对应一套硬件设备。违背了我们设计的初衷。</p>
</blockquote>
<h2 id="4G模块"><a href="#4G模块" class="headerlink" title="4G模块"></a>4G模块</h2><blockquote>
<p>增加一个4G模块，进行网络接入，和底座的安卓系统分开。相关网络信息配置在了4G模块上面，不再留存配置信息。其他模块依然是将SP装在底座上面，保证SP的分层。PAD则通过蓝牙通讯的方式通过底座调取硬件。这样做是将网络配置信息进行了隔离，与安卓系统做到了分开。但是其他模块的敏感信息依然会保存到底座上面，无法脱敏。这样做的好处就是实现了我们一开始的一对多的设计思路。</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>业务设计的时候，一定要做到随时调取随时断开，调取完设备之后，马上将蓝牙断开。这样，其他pad才可以调取到设备。真正的实现一对多的设计思想。</p>
]]></content>
      
        <categories>
            
            <category> 方案 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分体式 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio连接夜神模拟器]]></title>
      <url>/2017/12/20/AndroidStudio%E8%BF%9E%E6%8E%A5%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      <content type="html"><![CDATA[<ol>
<li>运行<code>-cmd</code>，进入夜神模拟器安装目录，进入目录下的bin</li>
<li>执行<code>Nox_adb.exe connect 127.0.0.1:62001</code>命令，connect左右都有空格。</li>
<li>执行命令后就可以连接到夜神模拟器。</li>
</ol>
<hr>
<blockquote>
<p>2017-12-23增加eclipse连接夜神模拟器相关信息</p>
</blockquote>
<h1 id="eclipse连接夜神模拟器注意事项"><a href="#eclipse连接夜神模拟器注意事项" class="headerlink" title="eclipse连接夜神模拟器注意事项"></a>eclipse连接夜神模拟器注意事项</h1><ul>
<li>和androidstudio方法一样</li>
<li>需要首先启动eclipse，然后再启动夜神模拟器</li>
<li>注意，如果此时启动的时候没有正常连接，可以尝试如下的操作，我使用如下的操作方法，成功的连接上了模拟器。</li>
</ul>
<blockquote>
<p>操作方法如下:</p>
</blockquote>
<ol>
<li>进入DDMS模式，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-029ddadd3af82c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DDMS模式.png"></li>
<li>单击左侧的devices栏倒三角，上图标注的位置。</li>
<li>选择reset adb</li>
<li>重复连接模拟器的步骤，即：进cmd，进入模拟器bin目录，使用命令行进行模拟器的连接。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -androidstudio -夜神模拟器 -随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea如何实现热部署]]></title>
      <url>/2017/12/20/idea%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>intellij idea真是让人又爱又恨，界面美观舒服，编码提示友好，开发效率高。但是最近发现一个很不爽的问题，使用springboot的时候无法实现热部署，于是乎，即使修改html一个标点符号，也得点击右上角启动。</p>
<h1 id="妥协妥协"><a href="#妥协妥协" class="headerlink" title="妥协妥协"></a>妥协妥协</h1><p>先这么将就着用吧。<br>有时候人就这样，不到逼不得已就不会做出改变。</p>
<h1 id="爆发吧"><a href="#爆发吧" class="headerlink" title="爆发吧"></a>爆发吧</h1><p>各种百度，找到如下解决方案，按照我说的步骤，必定实现热部署。</p>
<ol>
<li>确保setting compile下面的自动构建打钩，一般默认都会打钩，这里检查一遍，以防万一。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-f3af5a709a8dcde5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="setting设置.png"></li>
<li>ctrl+shift+a呼出搜索界面，一定要选择     第一个，然后回车：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-49c2e08d86b20b9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>找到如下图所示的选项，勾选<br><img src="http://upload-images.jianshu.io/upload_images/9493059-d3d73b4b16fffe5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>设置完成，重启intellij idea</li>
</ol>
</blockquote>
<h1 id="重点来了"><a href="#重点来了" class="headerlink" title="重点来了"></a>重点来了</h1><ol>
<li>修改pom配置文件，添加devtools，注意optional节点设置为true<br><img src="http://upload-images.jianshu.io/upload_images/9493059-440825eddc3dcf8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>添加configuration节点<br><img src="http://upload-images.jianshu.io/upload_images/9493059-4e3b4e132669b2ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>谷歌浏览器设置一下不带缓存<br><img src="http://upload-images.jianshu.io/upload_images/9493059-1d87264f911fd81c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>设置Thymleaf不带缓存<br><img src="http://upload-images.jianshu.io/upload_images/9493059-0c3d16ea01ec05d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<blockquote>
<p>OK 我们不在妥协了，和黑暗恶势力理直气壮的说了一句NO，please遵守老子的规则。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> intellijidea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thymleaf里面如何使用onclick事件]]></title>
      <url>/2017/12/20/Thymleaf%E9%87%8C%E9%9D%A2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8onclick%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不得不说springboot+Thymleaf是一个超级开发神器。再加上mybatis自动生成，一般的小项目分分钟搞定的节奏。</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>不过，最近遇到一个问题，问题如下：<br>在Thymleaf下面如何触发js的点击事件？一通百度之后，得到如下解决方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text=&quot;$&#123;classType.classname&#125; th:onclick=&quot;&apos;javascript:test(\&apos;&apos;+$&#123;classType.id&#125;+&apos;\&apos;)&apos;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>使用th:onclick标签，最终调取如下js函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function test(aaa) &#123;</span><br><span class="line">        window.location.href = &quot;alllist?classid=&quot;+aaa;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>以上js正常写即可。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>th:onclick之后一定要记得加javascript:，否则不会生效</li>
<li>javascript开头的要用’’包括起来。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Thymleaf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构建工具Gradle]]></title>
      <url>/2017/12/20/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7Gradle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>更严格意义上来说应该叫做：androidstudio下面的gradle介绍  </p>
<ul>
<li>敲黑板：在androidstudio的terminal命令行里面运行gradle的命令为：gradlew，比如：<code>gradlew -v</code><br><img src="http://upload-images.jianshu.io/upload_images/9493059-fdce26aa645c714b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="terminal位置.png"><h1 id="gradle的概念"><a href="#gradle的概念" class="headerlink" title="gradle的概念"></a>gradle的概念</h1></li>
<li>构建工具，使用java编程的各位应该对大名鼎鼎的maven比较熟悉，这俩干的活是一样的。</li>
<li>面向java语言<h1 id="gradle的仓库"><a href="#gradle的仓库" class="headerlink" title="gradle的仓库"></a>gradle的仓库</h1><h2 id="仓库类型及配置"><a href="#仓库类型及配置" class="headerlink" title="仓库类型及配置"></a>仓库类型及配置</h2>盗用一张图，里面有各种仓库：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-0d4b719d3da5220a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="资源仓库.png"><br>具体的仓库位置配置如下（app下面的build构建文件）：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-2e0623f19fcbd6a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
</blockquote>
<p>插一句，在各位使用maven的时候，将仓库地址替换成阿里云的镜像是不是快了很多？当然这里我们也可以采用和上图一样的配置使用阿里云镜像，构建过程瞬间提速有木有？</p>
<h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><ol>
<li>我们需要获取资源地址，推荐阿里云中央仓库，从此处可以搜到绝大多数的资源，<a href="http://mvnrepository.com/artifact/com.aliyun" target="_blank" rel="noopener">传送而去吧！</a></li>
<li>搜索到jar包资源之后，查看gradle构建语句：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-516ffdd6f15edad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看构建语句.png"></li>
<li>在app的build文件引入资源：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-ffc127db6237e479.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>好了，可以查看到我们的资源并且使用我们的资源了。<br><img src="http://upload-images.jianshu.io/upload_images/9493059-de9158e498a50358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>瞬间变得很简单了有木有？不用抓狂的搜索资源，下载资源，然后丢到libs里面了！感谢maven，感谢gradle。</li>
</ol>
<p>荆轲刺秦王，感谢扈三娘。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排队填单一体机解决方案]]></title>
      <url>/2017/12/20/%E6%8E%92%E9%98%9F%E5%A1%AB%E5%8D%95%E4%B8%80%E4%BD%93%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p> 银行网点的人流量越来越大，办理业务人员也越来越多，办理的业务也越来越繁琐和复杂。传统的排队机和传统的填单机各自为政，已经无法处理当前需要两者协同作业的业务，随着这些业务的日渐繁多，排队填单一体机的建设逐步的被提上日程。</p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul>
<li>各大银行网点<h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1></li>
</ul>
<ol>
<li>排队</li>
<li>预填单<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1></li>
</ol>
<ul>
<li>首先是目前银行太多太杂，各自的信息化建设水平层次不同。有的银行信息化程度高，已经存在一个总行级别的管理后台，将信息做了整体汇总。代表行：工行。</li>
<li>业务各不相同，各个行对应的业务无论是复杂度还是繁琐程度各不相同。<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote>
<p>区分P、C、V端。</p>
</blockquote>
</li>
<li>V端主要进行设备的管理，设备的监控和填单模板的配置。目前bcmv系统基本可以满足要求，但是欠缺的是填单模板部分。填单模板采用uedit扩展插件，拖拽的形式进行模板的配置。最终将模板以html的格式存入到数据库之中。</li>
<li>P端主要进行报文的收发，接收C端报文，发往V端获取数据，之后将报文再反馈给C端。</li>
<li>C端主要面向客户，提供取号业务和预填单业务。主要介绍一下预填单业务。客户选择预填单模板之后，显示对应的模板界面，操作完成之后，将模板填充并打印。<blockquote>
<p>技术方案      </p>
</blockquote>
</li>
</ul>
<p>C端使用基于arm的软件架构，基于android进行软件开发。<br>需要调取如下硬件：</p>
<ol>
<li>读卡器（读取二代证和银行卡，多合一）</li>
<li>凭条打印机</li>
<li>激光打印机<br>调取驱动SP主要是基于JNI，调取C编程的底层驱动SP，达到调取硬件的目的。<h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><img src="http://upload-images.jianshu.io/upload_images/9493059-85550adfaba5611f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="区分开发模块.png"><h3 id="UI展示模块"><a href="#UI展示模块" class="headerlink" title="UI展示模块"></a>UI展示模块</h3>封装常用的UI控件<h3 id="报文交互模块"><a href="#报文交互模块" class="headerlink" title="报文交互模块"></a>报文交互模块</h3>进行与P端通讯，获取服务端数据<h3 id="调取硬件模块"><a href="#调取硬件模块" class="headerlink" title="调取硬件模块"></a>调取硬件模块</h3>JNI调用底层硬件库，完成硬件模块的调用<h2 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h2></li>
<li>gradle构建（组件化开发）之前一直使用maven，gradle没有仔细研究过。</li>
<li>ndk打包</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 方案 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 方案 </tag>
            
            <tag> 排队填单 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA['Hexo搭建个人博客']]></title>
      <url>/2017/12/13/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>看了一些基于hexo的博客，瞬间觉得漂亮的不像话，主要是阅读文章的时候体验比较好，右边的导航栏好用的不要不要的。上一张读博客时候的图片看一下：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-5784bac83bd519bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo效果.png"><br>于是乎，决定折腾一下。  </p>
<h1 id="Hexo的安装步骤"><a href="#Hexo的安装步骤" class="headerlink" title="Hexo的安装步骤"></a>Hexo的安装步骤</h1><ol>
<li>安装nodeJS</li>
<li>安装Hexo</li>
<li>下载喜欢的Hexo模板</li>
<li>如果是用github做服务器（或者支持markdown解析），可以直接上传md文件，如果放到自己的服务器上，就需要进行静态网页的发布，先将源代码发布为html文件，然后安装发布软件进行发布（我用的nginx，这是说明一下nginx的安装）<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2>主要介绍一下window和ubuntu的安装。<h3 id="window安装"><a href="#window安装" class="headerlink" title="window安装"></a>window安装</h3></li>
<li>直接从官网下载安装文件即可，可以从该网站下载所需安装包<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node中文网下载</a>。傻瓜式安装，一路next直到安装成功。</li>
<li>安装完成之后，会有一个nodejs的命令窗口，打开命令窗口，下载hexo。如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/9493059-47706a8328560b28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nodejs命令窗口.png"><br><img src="http://upload-images.jianshu.io/upload_images/9493059-fc6dd99b213f0128.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开效果如下.png"></li>
<li>下载hexo资源<br>输入<code>npm install -g hexo</code><br>此处搞清楚了依赖关系，hexo是依赖于node的，想要安装使用hexo，必须得先安装node，之后使用npm进行hexo的安装下载。</li>
<li>初始化hexo<br>输入<code>hexo init</code><br>这样会在你当前目录下生成hexo的初始化资源，因此在执行该条语句之前，需要先cd到指定目录。</li>
<li>现在安装的hexo都是3.0版本，<font color="red">3.0版本的hexo有一个明显的改变就是把server进行了分离，安装hexo之后，还需要安装server</font>，使用如下命令进行安装即可：<code>npm install hexo-server --save</code>   </li>
<li>启动hexo<br>默认4000端口启动：<code>hexo s</code><br>指定端口启动：<code>hexo s -p 4001</code><br>不出意外，访问localhost:4000就可以看到美的冒泡的博客了吧。 <h3 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h3>安装顺序跟上面类似，依次获取资源命令如下：<br><code>apt-get install nodejs</code><br><code>npm install -g hexo</code><br><code>hexo init</code><br><code>npm install hexo-server --save</code><br>有可能出现apt-get失败的情况，这时候将资源包进行一下更新即可：<br><code>apt-get update</code><br><code>apt-get upgrade</code><br>好了，到此为止hexo就安装完成了。下面需要美化我们的个人博客。下一遍继续更新。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
